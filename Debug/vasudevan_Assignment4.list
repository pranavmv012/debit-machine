
vasudevan_Assignment4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  080053f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080053f4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d370  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f24  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002fe20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a06  00000000  00000000  00030800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000988f  00000000  00000000  00052206  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c29ec  00000000  00000000  0005ba95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  0011e4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050b0 	.word	0x080050b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080050b0 	.word	0x080050b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 fe38 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 fe28 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005c4:	2110      	movs	r1, #16
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005c8:	f7ff ffd2 	bl	8000570 <GPIO_SetBits>
 80005cc:	e003      	b.n	80005d6 <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005ce:	2110      	movs	r1, #16
 80005d0:	481e      	ldr	r0, [pc, #120]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005d2:	f7ff ffdd 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005e0:	2120      	movs	r1, #32
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005e4:	f7ff ffc4 	bl	8000570 <GPIO_SetBits>
 80005e8:	e003      	b.n	80005f2 <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005ea:	2120      	movs	r1, #32
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005ee:	f7ff ffcf 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d004      	beq.n	8000606 <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000600:	f7ff ffb6 	bl	8000570 <GPIO_SetBits>
 8000604:	e003      	b.n	800060e <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800060a:	f7ff ffc1 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	da04      	bge.n	8000620 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800061a:	f7ff ffa9 	bl	8000570 <GPIO_SetBits>
 800061e:	e003      	b.n	8000628 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000624:	f7ff ffb4 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800062e:	f001 fde3 	bl	80021f8 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8000632:	2002      	movs	r0, #2
 8000634:	f001 fb56 	bl	8001ce4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800063e:	f001 fddb 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	48000400 	.word	0x48000400

08000650 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000664:	2110      	movs	r1, #16
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000668:	f7ff ff82 	bl	8000570 <GPIO_SetBits>
 800066c:	e003      	b.n	8000676 <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800066e:	2110      	movs	r1, #16
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000672:	f7ff ff8d 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000680:	2120      	movs	r1, #32
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000684:	f7ff ff74 	bl	8000570 <GPIO_SetBits>
 8000688:	e003      	b.n	8000692 <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800068a:	2120      	movs	r1, #32
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 800068e:	f7ff ff7f 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	2b00      	cmp	r3, #0
 800069a:	d004      	beq.n	80006a6 <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006a0:	f7ff ff66 	bl	8000570 <GPIO_SetBits>
 80006a4:	e003      	b.n	80006ae <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006aa:	f7ff ff71 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006bc:	f7ff ff58 	bl	8000570 <GPIO_SetBits>
 80006c0:	e003      	b.n	80006ca <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006c6:	f7ff ff63 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2102      	movs	r1, #2
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006d0:	f001 fd92 	bl	80021f8 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80006d4:	2002      	movs	r0, #2
 80006d6:	f001 fb05 	bl	8001ce4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006e0:	f001 fd8a 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	48000400 	.word	0x48000400

080006f0 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff57 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffa3 	bl	8000650 <hd44780_wr_lo_nibble>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <hd44780_wr_cmd+0x24>)
 8000724:	f001 fd68 	bl	80021f8 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffe0 	bl	80006f0 <hd44780_write>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000400 	.word	0x48000400

0800073c <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 8000746:	2201      	movs	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <hd44780_wr_data+0x24>)
 800074c:	f001 fd54 	bl	80021f8 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffcc 	bl	80006f0 <hd44780_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	48000400 	.word	0x48000400

08000764 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HD44780_Init+0xbc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <HD44780_Init+0xbc>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <HD44780_Init+0xbc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8000782:	23f0      	movs	r3, #240	; 0xf0
 8000784:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <HD44780_Init+0xc0>)
 8000798:	f001 fbac 	bl	8001ef4 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800079c:	230b      	movs	r3, #11
 800079e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <HD44780_Init+0xc0>)
 80007b2:	f001 fb9f 	bl	8001ef4 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <HD44780_Init+0xc0>)
 80007bc:	f001 fd1c 	bl	80021f8 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <HD44780_Init+0xc0>)
 80007c6:	f001 fd17 	bl	80021f8 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <HD44780_Init+0xc0>)
 80007d0:	f001 fd12 	bl	80021f8 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80007d4:	2010      	movs	r0, #16
 80007d6:	f001 fa85 	bl	8001ce4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	f7ff fee8 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80007e0:	2005      	movs	r0, #5
 80007e2:	f001 fa7f 	bl	8001ce4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff fee2 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80007ec:	2001      	movs	r0, #1
 80007ee:	f001 fa79 	bl	8001ce4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007f2:	2030      	movs	r0, #48	; 0x30
 80007f4:	f7ff fedc 	bl	80005b0 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff fed9 	bl	80005b0 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f7ff ff88 	bl	8000714 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8000804:	200c      	movs	r0, #12
 8000806:	f7ff ff85 	bl	8000714 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff82 	bl	8000714 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8000810:	2006      	movs	r0, #6
 8000812:	f7ff ff7f 	bl	8000714 <hd44780_wr_cmd>

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff81 	bl	800073c <hd44780_wr_data>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d901      	bls.n	8000862 <HD44780_GotoXY+0x1e>
		x = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d901      	bls.n	800086c <HD44780_GotoXY+0x28>
		y = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d816      	bhi.n	80008a0 <HD44780_GotoXY+0x5c>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <HD44780_GotoXY+0x34>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000889 	.word	0x08000889
 800087c:	0800088f 	.word	0x0800088f
 8000880:	08000895 	.word	0x08000895
 8000884:	0800089b 	.word	0x0800089b
	case 0:
		copy_y = 0x80;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	73fb      	strb	r3, [r7, #15]
		break;
 800088c:	e008      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	73fb      	strb	r3, [r7, #15]
		break;
 8000892:	e005      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 8000894:	2394      	movs	r3, #148	; 0x94
 8000896:	73fb      	strb	r3, [r7, #15]
		break;
 8000898:	e002      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 800089a:	23d4      	movs	r3, #212	; 0xd4
 800089c:	73fb      	strb	r3, [r7, #15]
		break;
 800089e:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4413      	add	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff33 	bl	8000714 <hd44780_wr_cmd>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop

080008b8 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffab 	bl	8000828 <HD44780_PutChar>
		i++;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1ef      	bne.n	80008c4 <HD44780_PutStr+0xc>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ff0f 	bl	8000714 <hd44780_wr_cmd>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <deBounceInit>:
	GPIO_InitStruct.Pull = GPIO_PULLUP;//initializing the pull of GPIO_initstruct
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);//Initializing GPIOA with the GPIO_InitStruct
}

void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	460b      	mov	r3, r1
 8000908:	717b      	strb	r3, [r7, #5]
 800090a:	4613      	mov	r3, r2
 800090c:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struct
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin= pin;// initializing the pin of GPIO_initstruct
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;//initializing the mode of GPIO_initstruct
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
    switch(mode)//select the alternate pull for the input port
 8000926:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <deBounceInit+0x38>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d003      	beq.n	800093a <deBounceInit+0x3e>
 8000932:	e005      	b.n	8000940 <deBounceInit+0x44>
    {
    case 0 : GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e002      	b.n	8000940 <deBounceInit+0x44>
    case 1 : GPIO_InitStruct.Pull = GPIO_PULLDOWN;break;
 800093a:	2302      	movs	r3, #2
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	bf00      	nop
    }
    switch(port)//select which port to read from
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	2b42      	cmp	r3, #66	; 0x42
 8000944:	d00c      	beq.n	8000960 <deBounceInit+0x64>
 8000946:	2b43      	cmp	r3, #67	; 0x43
 8000948:	d011      	beq.n	800096e <deBounceInit+0x72>
 800094a:	2b41      	cmp	r3, #65	; 0x41
 800094c:	d000      	beq.n	8000950 <deBounceInit+0x54>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
    }

}
 800094e:	e015      	b.n	800097c <deBounceInit+0x80>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f001 facb 	bl	8001ef4 <HAL_GPIO_Init>
 800095e:	e00d      	b.n	800097c <deBounceInit+0x80>
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <deBounceInit+0x88>)
 8000968:	f001 fac4 	bl	8001ef4 <HAL_GPIO_Init>
 800096c:	e006      	b.n	800097c <deBounceInit+0x80>
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <deBounceInit+0x8c>)
 8000976:	f001 fabd 	bl	8001ef4 <HAL_GPIO_Init>
 800097a:	bf00      	nop
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	48000400 	.word	0x48000400
 8000988:	48000800 	.word	0x48000800

0800098c <deBounceInit2>:

void deBounceInit2(uint16_t pin2, char port, int8_t mode)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	460b      	mov	r3, r1
 8000998:	717b      	strb	r3, [r7, #5]
 800099a:	4613      	mov	r3, r2
 800099c:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struct
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin= pin2;// initializing the pin of GPIO_initstruct
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;//initializing the mode of GPIO_initstruct
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
    switch(mode)//select the alternate pull for the input port
 80009b6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <deBounceInit2+0x38>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d003      	beq.n	80009ca <deBounceInit2+0x3e>
 80009c2:	e005      	b.n	80009d0 <deBounceInit2+0x44>
    {
    case 0 : GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e002      	b.n	80009d0 <deBounceInit2+0x44>
    case 1 : GPIO_InitStruct.Pull = GPIO_PULLDOWN;break;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	bf00      	nop
    }
    switch(port)//select which port to read from
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	2b42      	cmp	r3, #66	; 0x42
 80009d4:	d00c      	beq.n	80009f0 <deBounceInit2+0x64>
 80009d6:	2b43      	cmp	r3, #67	; 0x43
 80009d8:	d011      	beq.n	80009fe <deBounceInit2+0x72>
 80009da:	2b41      	cmp	r3, #65	; 0x41
 80009dc:	d000      	beq.n	80009e0 <deBounceInit2+0x54>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
    }

}
 80009de:	e015      	b.n	8000a0c <deBounceInit2+0x80>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f001 fa83 	bl	8001ef4 <HAL_GPIO_Init>
 80009ee:	e00d      	b.n	8000a0c <deBounceInit2+0x80>
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <deBounceInit2+0x88>)
 80009f8:	f001 fa7c 	bl	8001ef4 <HAL_GPIO_Init>
 80009fc:	e006      	b.n	8000a0c <deBounceInit2+0x80>
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <deBounceInit2+0x8c>)
 8000a06:	f001 fa75 	bl	8001ef4 <HAL_GPIO_Init>
 8000a0a:	bf00      	nop
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	48000400 	.word	0x48000400
 8000a18:	48000800 	.word	0x48000800

08000a1c <deBounceInit3>:
void deBounceInit3(uint16_t pin3, char port, int8_t mode)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	717b      	strb	r3, [r7, #5]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struct
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin= pin3;// initializing the pin of GPIO_initstruct
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;//initializing the mode of GPIO_initstruct
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
    switch(mode)//select the alternate pull for the input port
 8000a46:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <deBounceInit3+0x38>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d003      	beq.n	8000a5a <deBounceInit3+0x3e>
 8000a52:	e005      	b.n	8000a60 <deBounceInit3+0x44>
    {
    case 0 : GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e002      	b.n	8000a60 <deBounceInit3+0x44>
    case 1 : GPIO_InitStruct.Pull = GPIO_PULLDOWN;break;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	bf00      	nop
    }
    switch(port)//select which port to read from
 8000a60:	797b      	ldrb	r3, [r7, #5]
 8000a62:	2b42      	cmp	r3, #66	; 0x42
 8000a64:	d00c      	beq.n	8000a80 <deBounceInit3+0x64>
 8000a66:	2b43      	cmp	r3, #67	; 0x43
 8000a68:	d011      	beq.n	8000a8e <deBounceInit3+0x72>
 8000a6a:	2b41      	cmp	r3, #65	; 0x41
 8000a6c:	d000      	beq.n	8000a70 <deBounceInit3+0x54>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
    }

}
 8000a6e:	e015      	b.n	8000a9c <deBounceInit3+0x80>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f001 fa3b 	bl	8001ef4 <HAL_GPIO_Init>
 8000a7e:	e00d      	b.n	8000a9c <deBounceInit3+0x80>
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <deBounceInit3+0x88>)
 8000a88:	f001 fa34 	bl	8001ef4 <HAL_GPIO_Init>
 8000a8c:	e006      	b.n	8000a9c <deBounceInit3+0x80>
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <deBounceInit3+0x8c>)
 8000a96:	f001 fa2d 	bl	8001ef4 <HAL_GPIO_Init>
 8000a9a:	bf00      	nop
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48000800 	.word	0x48000800

08000aac <deBounceInit4>:
void deBounceInit4(uint16_t pin4, char port, int8_t mode)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	717b      	strb	r3, [r7, #5]
 8000aba:	4613      	mov	r3, r2
 8000abc:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struct
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin= pin4;// initializing the pin of GPIO_initstruct
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;//initializing the mode of GPIO_initstruct
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
    switch(mode)//select the alternate pull for the input port
 8000ad6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <deBounceInit4+0x38>
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d003      	beq.n	8000aea <deBounceInit4+0x3e>
 8000ae2:	e005      	b.n	8000af0 <deBounceInit4+0x44>
    {
    case 0 : GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e002      	b.n	8000af0 <deBounceInit4+0x44>
    case 1 : GPIO_InitStruct.Pull = GPIO_PULLDOWN;break;
 8000aea:	2302      	movs	r3, #2
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	bf00      	nop
    }
    switch(port)//select which port to read from
 8000af0:	797b      	ldrb	r3, [r7, #5]
 8000af2:	2b42      	cmp	r3, #66	; 0x42
 8000af4:	d00c      	beq.n	8000b10 <deBounceInit4+0x64>
 8000af6:	2b43      	cmp	r3, #67	; 0x43
 8000af8:	d011      	beq.n	8000b1e <deBounceInit4+0x72>
 8000afa:	2b41      	cmp	r3, #65	; 0x41
 8000afc:	d000      	beq.n	8000b00 <deBounceInit4+0x54>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
    }

}
 8000afe:	e015      	b.n	8000b2c <deBounceInit4+0x80>
    case 'A':HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f001 f9f3 	bl	8001ef4 <HAL_GPIO_Init>
 8000b0e:	e00d      	b.n	8000b2c <deBounceInit4+0x80>
    case 'B':HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <deBounceInit4+0x88>)
 8000b18:	f001 f9ec 	bl	8001ef4 <HAL_GPIO_Init>
 8000b1c:	e006      	b.n	8000b2c <deBounceInit4+0x80>
    case 'C':HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);break;
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <deBounceInit4+0x8c>)
 8000b26:	f001 f9e5 	bl	8001ef4 <HAL_GPIO_Init>
 8000b2a:	bf00      	nop
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800

08000b3c <deBounceReadPin>:
//function to read button 1
int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	460b      	mov	r3, r1
 8000b48:	717b      	strb	r3, [r7, #5]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState=GPIO_PIN_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval=50;
 8000b52:	2332      	movs	r3, #50	; 0x32
 8000b54:	737b      	strb	r3, [r7, #13]
	int32_t MsTimestamp= HAL_GetTick();
 8000b56:	f001 f8b9 	bl	8001ccc <HAL_GetTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	60bb      	str	r3, [r7, #8]

	switch(port)//select which port to read from
 8000b5e:	797b      	ldrb	r3, [r7, #5]
 8000b60:	2b42      	cmp	r3, #66	; 0x42
 8000b62:	d00c      	beq.n	8000b7e <deBounceReadPin+0x42>
 8000b64:	2b43      	cmp	r3, #67	; 0x43
 8000b66:	d012      	beq.n	8000b8e <deBounceReadPin+0x52>
 8000b68:	2b41      	cmp	r3, #65	; 0x41
 8000b6a:	d118      	bne.n	8000b9e <deBounceReadPin+0x62>
	    {
	    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin); break;
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f001 fb28 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e00f      	b.n	8000b9e <deBounceReadPin+0x62>
	    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin); break;
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	4619      	mov	r1, r3
 8000b82:	482a      	ldr	r0, [pc, #168]	; (8000c2c <deBounceReadPin+0xf0>)
 8000b84:	f001 fb20 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e007      	b.n	8000b9e <deBounceReadPin+0x62>
	    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin); break;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4827      	ldr	r0, [pc, #156]	; (8000c30 <deBounceReadPin+0xf4>)
 8000b94:	f001 fb18 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	bf00      	nop
	    }
	if (pinState==GPIO_PIN_RESET)
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <deBounceReadPin+0x6e>
	{
		pinStateWeAreLookingFor=0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
 8000ba8:	e031      	b.n	8000c0e <deBounceReadPin+0xd2>
	}
	else
	{
		pinStateWeAreLookingFor=1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
	}

	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000bae:	e02e      	b.n	8000c0e <deBounceReadPin+0xd2>
	{
		switch(port)//select which port to read from
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	2b42      	cmp	r3, #66	; 0x42
 8000bb4:	d00c      	beq.n	8000bd0 <deBounceReadPin+0x94>
 8000bb6:	2b43      	cmp	r3, #67	; 0x43
 8000bb8:	d012      	beq.n	8000be0 <deBounceReadPin+0xa4>
 8000bba:	2b41      	cmp	r3, #65	; 0x41
 8000bbc:	d118      	bne.n	8000bf0 <deBounceReadPin+0xb4>
			    {
			    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin); break;
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f001 faff 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e00f      	b.n	8000bf0 <deBounceReadPin+0xb4>
			    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin); break;
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <deBounceReadPin+0xf0>)
 8000bd6:	f001 faf7 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e007      	b.n	8000bf0 <deBounceReadPin+0xb4>
			    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin); break;
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <deBounceReadPin+0xf4>)
 8000be6:	f001 faef 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	bf00      	nop
			    }
		if (pinState!=pinStateWeAreLookingFor)
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d009      	beq.n	8000c0e <deBounceReadPin+0xd2>
		{
			pinStateWeAreLookingFor= !pinStateWeAreLookingFor;
 8000bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	73bb      	strb	r3, [r7, #14]
			MsTimestamp-HAL_GetTick();
 8000c0a:	f001 f85f 	bl	8001ccc <HAL_GetTick>
	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000c0e:	f001 f85d 	bl	8001ccc <HAL_GetTick>
 8000c12:	4601      	mov	r1, r0
 8000c14:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d3c7      	bcc.n	8000bb0 <deBounceReadPin+0x74>
		}

	}
	return (pinStateWeAreLookingFor);
 8000c20:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48000800 	.word	0x48000800

08000c34 <deBounceReadPin2>:
//function to read button 2

int8_t deBounceReadPin2(uint16_t pin2, char port, int8_t mode)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	717b      	strb	r3, [r7, #5]
 8000c42:	4613      	mov	r3, r2
 8000c44:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState=GPIO_PIN_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval=50;
 8000c4a:	2332      	movs	r3, #50	; 0x32
 8000c4c:	737b      	strb	r3, [r7, #13]
	int32_t MsTimestamp= HAL_GetTick();
 8000c4e:	f001 f83d 	bl	8001ccc <HAL_GetTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	60bb      	str	r3, [r7, #8]

	switch(port)//select which port to read from
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	2b42      	cmp	r3, #66	; 0x42
 8000c5a:	d00c      	beq.n	8000c76 <deBounceReadPin2+0x42>
 8000c5c:	2b43      	cmp	r3, #67	; 0x43
 8000c5e:	d012      	beq.n	8000c86 <deBounceReadPin2+0x52>
 8000c60:	2b41      	cmp	r3, #65	; 0x41
 8000c62:	d118      	bne.n	8000c96 <deBounceReadPin2+0x62>
	    {
	    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin2); break;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 faac 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e00f      	b.n	8000c96 <deBounceReadPin2+0x62>
	    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin2); break;
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <deBounceReadPin2+0xf0>)
 8000c7c:	f001 faa4 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e007      	b.n	8000c96 <deBounceReadPin2+0x62>
	    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin2); break;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4827      	ldr	r0, [pc, #156]	; (8000d28 <deBounceReadPin2+0xf4>)
 8000c8c:	f001 fa9c 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	bf00      	nop
	    }
	if (pinState==GPIO_PIN_RESET)
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <deBounceReadPin2+0x6e>
	{
		pinStateWeAreLookingFor=0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73bb      	strb	r3, [r7, #14]
 8000ca0:	e031      	b.n	8000d06 <deBounceReadPin2+0xd2>
	}
	else
	{
		pinStateWeAreLookingFor=1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73bb      	strb	r3, [r7, #14]
	}

	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000ca6:	e02e      	b.n	8000d06 <deBounceReadPin2+0xd2>
	{
		switch(port)//select which port to read from
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b42      	cmp	r3, #66	; 0x42
 8000cac:	d00c      	beq.n	8000cc8 <deBounceReadPin2+0x94>
 8000cae:	2b43      	cmp	r3, #67	; 0x43
 8000cb0:	d012      	beq.n	8000cd8 <deBounceReadPin2+0xa4>
 8000cb2:	2b41      	cmp	r3, #65	; 0x41
 8000cb4:	d118      	bne.n	8000ce8 <deBounceReadPin2+0xb4>
			    {
			    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin2); break;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f001 fa83 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e00f      	b.n	8000ce8 <deBounceReadPin2+0xb4>
			    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin2); break;
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4815      	ldr	r0, [pc, #84]	; (8000d24 <deBounceReadPin2+0xf0>)
 8000cce:	f001 fa7b 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e007      	b.n	8000ce8 <deBounceReadPin2+0xb4>
			    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin2); break;
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <deBounceReadPin2+0xf4>)
 8000cde:	f001 fa73 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	bf00      	nop
			    }
		if (pinState!=pinStateWeAreLookingFor)
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d009      	beq.n	8000d06 <deBounceReadPin2+0xd2>
		{
			pinStateWeAreLookingFor= !pinStateWeAreLookingFor;
 8000cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	73bb      	strb	r3, [r7, #14]
			MsTimestamp-HAL_GetTick();
 8000d02:	f000 ffe3 	bl	8001ccc <HAL_GetTick>
	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000d06:	f000 ffe1 	bl	8001ccc <HAL_GetTick>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4413      	add	r3, r2
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d3c7      	bcc.n	8000ca8 <deBounceReadPin2+0x74>
		}

	}
	return (pinStateWeAreLookingFor);
 8000d18:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800

08000d2c <deBounceReadPin3>:
//function to read button 3

int8_t deBounceReadPin3(uint16_t pin3, char port, int8_t mode)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	460b      	mov	r3, r1
 8000d38:	717b      	strb	r3, [r7, #5]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState=GPIO_PIN_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval=50;
 8000d42:	2332      	movs	r3, #50	; 0x32
 8000d44:	737b      	strb	r3, [r7, #13]
	int32_t MsTimestamp= HAL_GetTick();
 8000d46:	f000 ffc1 	bl	8001ccc <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60bb      	str	r3, [r7, #8]

	switch(port)//select which port to read from
 8000d4e:	797b      	ldrb	r3, [r7, #5]
 8000d50:	2b42      	cmp	r3, #66	; 0x42
 8000d52:	d00c      	beq.n	8000d6e <deBounceReadPin3+0x42>
 8000d54:	2b43      	cmp	r3, #67	; 0x43
 8000d56:	d012      	beq.n	8000d7e <deBounceReadPin3+0x52>
 8000d58:	2b41      	cmp	r3, #65	; 0x41
 8000d5a:	d118      	bne.n	8000d8e <deBounceReadPin3+0x62>
	    {
	    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin3); break;
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f001 fa30 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e00f      	b.n	8000d8e <deBounceReadPin3+0x62>
	    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin3); break;
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4619      	mov	r1, r3
 8000d72:	482a      	ldr	r0, [pc, #168]	; (8000e1c <deBounceReadPin3+0xf0>)
 8000d74:	f001 fa28 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e007      	b.n	8000d8e <deBounceReadPin3+0x62>
	    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin3); break;
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4827      	ldr	r0, [pc, #156]	; (8000e20 <deBounceReadPin3+0xf4>)
 8000d84:	f001 fa20 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	bf00      	nop
	    }
	if (pinState==GPIO_PIN_RESET)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <deBounceReadPin3+0x6e>
	{
		pinStateWeAreLookingFor=0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	e031      	b.n	8000dfe <deBounceReadPin3+0xd2>
	}
	else
	{
		pinStateWeAreLookingFor=1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]
	}

	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000d9e:	e02e      	b.n	8000dfe <deBounceReadPin3+0xd2>
	{
		switch(port)//select which port to read from
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	2b42      	cmp	r3, #66	; 0x42
 8000da4:	d00c      	beq.n	8000dc0 <deBounceReadPin3+0x94>
 8000da6:	2b43      	cmp	r3, #67	; 0x43
 8000da8:	d012      	beq.n	8000dd0 <deBounceReadPin3+0xa4>
 8000daa:	2b41      	cmp	r3, #65	; 0x41
 8000dac:	d118      	bne.n	8000de0 <deBounceReadPin3+0xb4>
			    {
			    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin3); break;
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f001 fa07 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e00f      	b.n	8000de0 <deBounceReadPin3+0xb4>
			    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin3); break;
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4815      	ldr	r0, [pc, #84]	; (8000e1c <deBounceReadPin3+0xf0>)
 8000dc6:	f001 f9ff 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e007      	b.n	8000de0 <deBounceReadPin3+0xb4>
			    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin3); break;
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <deBounceReadPin3+0xf4>)
 8000dd6:	f001 f9f7 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	bf00      	nop
			    }
		if (pinState!=pinStateWeAreLookingFor)
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d009      	beq.n	8000dfe <deBounceReadPin3+0xd2>
		{
			pinStateWeAreLookingFor= !pinStateWeAreLookingFor;
 8000dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf0c      	ite	eq
 8000df2:	2301      	moveq	r3, #1
 8000df4:	2300      	movne	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	73bb      	strb	r3, [r7, #14]
			MsTimestamp-HAL_GetTick();
 8000dfa:	f000 ff67 	bl	8001ccc <HAL_GetTick>
	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000dfe:	f000 ff65 	bl	8001ccc <HAL_GetTick>
 8000e02:	4601      	mov	r1, r0
 8000e04:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d3c7      	bcc.n	8000da0 <deBounceReadPin3+0x74>
		}

	}
	return (pinStateWeAreLookingFor);
 8000e10:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800

08000e24 <deBounceReadPin4>:
//function to read button ok

int8_t deBounceReadPin4(uint16_t pin4, char port, int8_t mode)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	717b      	strb	r3, [r7, #5]
 8000e32:	4613      	mov	r3, r2
 8000e34:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState=GPIO_PIN_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval=50;
 8000e3a:	2332      	movs	r3, #50	; 0x32
 8000e3c:	737b      	strb	r3, [r7, #13]
	int32_t MsTimestamp= HAL_GetTick();
 8000e3e:	f000 ff45 	bl	8001ccc <HAL_GetTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	60bb      	str	r3, [r7, #8]

	switch(port)//select which port to read from
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	2b42      	cmp	r3, #66	; 0x42
 8000e4a:	d00c      	beq.n	8000e66 <deBounceReadPin4+0x42>
 8000e4c:	2b43      	cmp	r3, #67	; 0x43
 8000e4e:	d012      	beq.n	8000e76 <deBounceReadPin4+0x52>
 8000e50:	2b41      	cmp	r3, #65	; 0x41
 8000e52:	d118      	bne.n	8000e86 <deBounceReadPin4+0x62>
	    {
	    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin4); break;
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f001 f9b4 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e00f      	b.n	8000e86 <deBounceReadPin4+0x62>
	    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin4); break;
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482a      	ldr	r0, [pc, #168]	; (8000f14 <deBounceReadPin4+0xf0>)
 8000e6c:	f001 f9ac 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e007      	b.n	8000e86 <deBounceReadPin4+0x62>
	    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin4); break;
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4827      	ldr	r0, [pc, #156]	; (8000f18 <deBounceReadPin4+0xf4>)
 8000e7c:	f001 f9a4 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	bf00      	nop
	    }
	if (pinState==GPIO_PIN_RESET)
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <deBounceReadPin4+0x6e>
	{
		pinStateWeAreLookingFor=0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73bb      	strb	r3, [r7, #14]
 8000e90:	e031      	b.n	8000ef6 <deBounceReadPin4+0xd2>
	}
	else
	{
		pinStateWeAreLookingFor=1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73bb      	strb	r3, [r7, #14]
	}

	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000e96:	e02e      	b.n	8000ef6 <deBounceReadPin4+0xd2>
	{
		switch(port)//select which port to read from
 8000e98:	797b      	ldrb	r3, [r7, #5]
 8000e9a:	2b42      	cmp	r3, #66	; 0x42
 8000e9c:	d00c      	beq.n	8000eb8 <deBounceReadPin4+0x94>
 8000e9e:	2b43      	cmp	r3, #67	; 0x43
 8000ea0:	d012      	beq.n	8000ec8 <deBounceReadPin4+0xa4>
 8000ea2:	2b41      	cmp	r3, #65	; 0x41
 8000ea4:	d118      	bne.n	8000ed8 <deBounceReadPin4+0xb4>
			    {
			    case 'A':pinState= HAL_GPIO_ReadPin(GPIOA, pin4); break;
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 f98b 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e00f      	b.n	8000ed8 <deBounceReadPin4+0xb4>
			    case 'B':pinState= HAL_GPIO_ReadPin(GPIOB, pin4); break;
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4815      	ldr	r0, [pc, #84]	; (8000f14 <deBounceReadPin4+0xf0>)
 8000ebe:	f001 f983 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e007      	b.n	8000ed8 <deBounceReadPin4+0xb4>
			    case 'C':pinState= HAL_GPIO_ReadPin(GPIOC, pin4); break;
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	; (8000f18 <deBounceReadPin4+0xf4>)
 8000ece:	f001 f97b 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	bf00      	nop
			    }
		if (pinState!=pinStateWeAreLookingFor)
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d009      	beq.n	8000ef6 <deBounceReadPin4+0xd2>
		{
			pinStateWeAreLookingFor= !pinStateWeAreLookingFor;
 8000ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73bb      	strb	r3, [r7, #14]
			MsTimestamp-HAL_GetTick();
 8000ef2:	f000 feeb 	bl	8001ccc <HAL_GetTick>
	while(HAL_GetTick()<(MsTimestamp+stableInterval))
 8000ef6:	f000 fee9 	bl	8001ccc <HAL_GetTick>
 8000efa:	4601      	mov	r1, r0
 8000efc:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	4299      	cmp	r1, r3
 8000f06:	d3c7      	bcc.n	8000e98 <deBounceReadPin4+0x74>
		}

	}
	return (pinStateWeAreLookingFor);
 8000f08:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800

08000f1c <printWelcome>:
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */

void printWelcome()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HD44780_Init(); // initializing lcd
 8000f20:	f7ff fc20 	bl	8000764 <HD44780_Init>
	HD44780_GotoXY(4, 0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2004      	movs	r0, #4
 8000f28:	f7ff fc8c 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("Welcome");
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <printWelcome+0x1c>)
 8000f2e:	f7ff fcc3 	bl	80008b8 <HD44780_PutStr>
//	HAL_Delay(1);
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	080050c8 	.word	0x080050c8

08000f3c <printAmount>:
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */

void printAmount()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HD44780_ClrScr(); //clear lcd
 8000f40:	f7ff fcd4 	bl	80008ec <HD44780_ClrScr>
	HD44780_GotoXY(4, 0);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2004      	movs	r0, #4
 8000f48:	f7ff fc7c 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("$12.34");
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <printAmount+0x28>)
 8000f4e:	f7ff fcb3 	bl	80008b8 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fc75 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("Press Ok or Can");
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <printAmount+0x2c>)
 8000f5c:	f7ff fcac 	bl	80008b8 <HD44780_PutStr>

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	080050d0 	.word	0x080050d0
 8000f68:	080050d8 	.word	0x080050d8

08000f6c <printAccount>:
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */

void printAccount()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HD44780_ClrScr(); //clear lcd
 8000f70:	f7ff fcbc 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Press 1 for Chequing");
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <printAccount+0x20>)
 8000f76:	f7ff fc9f 	bl	80008b8 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fc61 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("and 2 for Savings");
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <printAccount+0x24>)
 8000f84:	f7ff fc98 	bl	80008b8 <HD44780_PutStr>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	080050e8 	.word	0x080050e8
 8000f90:	08005100 	.word	0x08005100

08000f94 <printCancelled>:
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */

void printCancelled()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HD44780_ClrScr(); //clear lcd
 8000f98:	f7ff fca8 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Transaction");
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <printCancelled+0x28>)
 8000f9e:	f7ff fc8b 	bl	80008b8 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fc4d 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("Cancelled");
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <printCancelled+0x2c>)
 8000fac:	f7ff fc84 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(10000);
 8000fb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fb4:	f000 fe96 	bl	8001ce4 <HAL_Delay>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08005114 	.word	0x08005114
 8000fc0:	08005120 	.word	0x08005120

08000fc4 <printEnterpin>:
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */

void printEnterpin()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HD44780_ClrScr(); //clear lcd
 8000fc8:	f7ff fc90 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Enter pin");
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <printEnterpin+0x18>)
 8000fce:	f7ff fc73 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fe86 	bl	8001ce4 <HAL_Delay>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800512c 	.word	0x0800512c

08000fe0 <printProcessing>:
 * DESCRIPTION: function for printing "Processing" on lcd for 10seconds
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */
void printProcessing()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	//print processing
	HD44780_ClrScr(); //clear lcd
 8000fe4:	f7ff fc82 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Processing...");
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <printProcessing+0x20>)
 8000fea:	f7ff fc65 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(10000);
 8000fee:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ff2:	f000 fe77 	bl	8001ce4 <HAL_Delay>
	printf("processing\r\n");
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <printProcessing+0x24>)
 8000ff8:	f003 f950 	bl	800429c <puts>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	08005138 	.word	0x08005138
 8001004:	08005148 	.word	0x08005148

08001008 <printIncorrect>:
 * DESCRIPTION: function for printing "Incorrect pin"  on lcd
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */
void printIncorrect()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	//printing incorrect pin
	HD44780_ClrScr(); //clear lcd
 800100c:	f7ff fc6e 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Incorrect pin");
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <printIncorrect+0x1c>)
 8001012:	f7ff fc51 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(2000);
 8001016:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800101a:	f000 fe63 	bl	8001ce4 <HAL_Delay>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	08005154 	.word	0x08005154

08001028 <printApproved>:
 * DESCRIPTION: function for printing transaction appoval  on lcd
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */
void printApproved()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	//printing transaction approved
	HD44780_ClrScr(); //clear lcd
 800102c:	f7ff fc5e 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Approved");
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <printApproved+0x28>)
 8001032:	f7ff fc41 	bl	80008b8 <HD44780_PutStr>
	HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 8001036:	2101      	movs	r1, #1
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fc03 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("Thank you");
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <printApproved+0x2c>)
 8001040:	f7ff fc3a 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(2000);
 8001044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001048:	f000 fe4c 	bl	8001ce4 <HAL_Delay>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08005164 	.word	0x08005164
 8001054:	08005170 	.word	0x08005170

08001058 <printNobalance>:
 * DESCRIPTION: function for printing insufficient balance statement on lcd
 * PARAMETERS : Nothing
 * RETURNS    : Nothing
 */
void printNobalance()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HD44780_ClrScr(); //clear lcd
 800105c:	f7ff fc46 	bl	80008ec <HD44780_ClrScr>
	HD44780_PutStr("Insufficient");
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <printNobalance+0x28>)
 8001062:	f7ff fc29 	bl	80008b8 <HD44780_PutStr>
	HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fbeb 	bl	8000844 <HD44780_GotoXY>
	HD44780_PutStr("Balance");
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <printNobalance+0x2c>)
 8001070:	f7ff fc22 	bl	80008b8 <HD44780_PutStr>
	HAL_Delay(2000);
 8001074:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001078:	f000 fe34 	bl	8001ce4 <HAL_Delay>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800517c 	.word	0x0800517c
 8001084:	0800518c 	.word	0x0800518c

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0
	//setting up GPIO pins
	uint16_t pin= GPIO_PIN_3;//button for 1
 800108e:	2308      	movs	r3, #8
 8001090:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t pin2= GPIO_PIN_4;//button for 2
 8001092:	2310      	movs	r3, #16
 8001094:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t pin3= GPIO_PIN_7;//button for 3
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t pin4= GPIO_PIN_8;//button for 4
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	84fb      	strh	r3, [r7, #38]	; 0x26

	char port= 'A';//setting port
 80010a0:	2341      	movs	r3, #65	; 0x41
 80010a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int8_t mode = 0;//setting mode
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	//initializing ports
	int8_t pA3=1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int8_t pA4=1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	int8_t pA7=1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	int8_t pA8=1;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 3020 	strb.w	r3, [r7, #32]

	int16_t passCode[]={1111,1121,1133,1213,2111,2331,3111,3211,3333};//preassigning passcodes
 80010c4:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <main+0x33c>)
 80010c6:	f107 0408 	add.w	r4, r7, #8
 80010ca:	461d      	mov	r5, r3
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	8023      	strh	r3, [r4, #0]
	int16_t passWord[3]={0};//password entered by user
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	809a      	strh	r2, [r3, #4]
	int16_t passwordInt=0;// variable to store the interger value of password entered by user
 80010dc:	2300      	movs	r3, #0
 80010de:	83fb      	strh	r3, [r7, #30]
//initializing the debounce
	deBounceInit( pin, port, mode);
 80010e0:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80010e4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc06 	bl	80008fc <deBounceInit>
	deBounceInit2( pin2, port, mode);
 80010f0:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80010f4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80010f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc46 	bl	800098c <deBounceInit2>
	deBounceInit3( pin3, port, mode);
 8001100:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001104:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fc86 	bl	8000a1c <deBounceInit3>
	deBounceInit4( pin4, port, mode);
 8001110:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001114:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcc6 	bl	8000aac <deBounceInit4>

	int16_t num=0;//for differentiate which button is pressed
 8001120:	2300      	movs	r3, #0
 8001122:	83bb      	strh	r3, [r7, #28]
	int16_t buttonPressed=0;
 8001124:	2300      	movs	r3, #0
 8001126:	837b      	strh	r3, [r7, #26]
	int16_t tranState=0;// state machine state
 8001128:	2300      	movs	r3, #0
 800112a:	86fb      	strh	r3, [r7, #54]	; 0x36
	int16_t i=0;//counter1
 800112c:	2300      	movs	r3, #0
 800112e:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t j=0;//counter2
 8001130:	2300      	movs	r3, #0
 8001132:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t flag=0;
 8001134:	2300      	movs	r3, #0
 8001136:	863b      	strh	r3, [r7, #48]	; 0x30
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fd63 	bl	8001c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 faaa 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 fb5a 	bl	80017f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001144:	f000 fb28 	bl	8001798 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     switch(tranState)//switch statement for state machine
 8001148:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800114c:	2b0d      	cmp	r3, #13
 800114e:	d8fb      	bhi.n	8001148 <main+0xc0>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <main+0xd0>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001191 	.word	0x08001191
 800115c:	080011c9 	.word	0x080011c9
 8001160:	08001221 	.word	0x08001221
 8001164:	08001279 	.word	0x08001279
 8001168:	08001317 	.word	0x08001317
 800116c:	080013dd 	.word	0x080013dd
 8001170:	0800148b 	.word	0x0800148b
 8001174:	08001539 	.word	0x08001539
 8001178:	0800157d 	.word	0x0800157d
 800117c:	080015d5 	.word	0x080015d5
 8001180:	0800161f 	.word	0x0800161f
 8001184:	0800162f 	.word	0x0800162f
 8001188:	08001651 	.word	0x08001651
 800118c:	08001661 	.word	0x08001661
     {
     case 0: printWelcome();//function call to print welcome
 8001190:	f7ff fec4 	bl	8000f1c <printWelcome>
         	int16_t passwordInt=0;//initializing password integer
 8001194:	2300      	movs	r3, #0
 8001196:	85fb      	strh	r3, [r7, #46]	; 0x2e
        	printf("Welcome\r\n");
 8001198:	488b      	ldr	r0, [pc, #556]	; (80013c8 <main+0x340>)
 800119a:	f003 f87f 	bl	800429c <puts>
        	//getting the input from ok button
    	   	pA8 = deBounceReadPin4(pin4, port, mode);
 800119e:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80011a2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80011a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe3b 	bl	8000e24 <deBounceReadPin4>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f887 3020 	strb.w	r3, [r7, #32]
            if(pA8==0)
 80011b4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <main+0x13a>
            {
            	tranState=1;
 80011bc:	2301      	movs	r3, #1
 80011be:	86fb      	strh	r3, [r7, #54]	; 0x36
            	break;
 80011c0:	e256      	b.n	8001670 <main+0x5e8>
            }
            else
            {
            	tranState=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	86fb      	strh	r3, [r7, #54]	; 0x36
            	break;
 80011c6:	e253      	b.n	8001670 <main+0x5e8>
            }
     case 1:
    	    printAmount();//function call to print amount
 80011c8:	f7ff feb8 	bl	8000f3c <printAmount>
    	    printf("12.4\r\n press ok or canc\r\n");
 80011cc:	487f      	ldr	r0, [pc, #508]	; (80013cc <main+0x344>)
 80011ce:	f003 f865 	bl	800429c <puts>
    	    // getting input from button 1 and 2
    	  	pA3 = deBounceReadPin(pin, port, mode);
 80011d2:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80011d6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80011da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fcad 	bl	8000b3c <deBounceReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    		pA4 = deBounceReadPin2(pin2, port, mode);
 80011e8:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80011ec:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80011f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fd1e 	bl	8000c34 <deBounceReadPin2>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    		if(pA3==0)
 80011fe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <main+0x184>
    		{
    			tranState=2;
 8001206:	2302      	movs	r3, #2
 8001208:	86fb      	strh	r3, [r7, #54]	; 0x36
    			break;
 800120a:	e231      	b.n	8001670 <main+0x5e8>
    		}
    		else if(pA4==0)
 800120c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <main+0x192>
    		{
    			tranState=13;
 8001214:	230d      	movs	r3, #13
 8001216:	86fb      	strh	r3, [r7, #54]	; 0x36
    			break;
 8001218:	e22a      	b.n	8001670 <main+0x5e8>

    		}
    		else
    		{
    			tranState=1;
 800121a:	2301      	movs	r3, #1
 800121c:	86fb      	strh	r3, [r7, #54]	; 0x36
    			break;
 800121e:	e227      	b.n	8001670 <main+0x5e8>
    		}

		case 2:
			printAccount();//fuction call to print account type
 8001220:	f7ff fea4 	bl	8000f6c <printAccount>
			printf("Press 1 for Chequing\r\nand 2 for Savings\r\n");
 8001224:	486a      	ldr	r0, [pc, #424]	; (80013d0 <main+0x348>)
 8001226:	f003 f839 	bl	800429c <puts>
    	    // getting input from button 1 and 2
    	  	pA3 = deBounceReadPin(pin, port, mode);
 800122a:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800122e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001232:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fc81 	bl	8000b3c <deBounceReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    		pA4 = deBounceReadPin2(pin2, port, mode);
 8001240:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001244:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001248:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcf2 	bl	8000c34 <deBounceReadPin2>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    		if(pA3==0)
 8001256:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <main+0x1dc>
    		{
    			tranState=3;
 800125e:	2303      	movs	r3, #3
 8001260:	86fb      	strh	r3, [r7, #54]	; 0x36
    			break;
 8001262:	e205      	b.n	8001670 <main+0x5e8>
    		}
    		else if(pA4==0)
 8001264:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <main+0x1ea>
			{
				tranState=3;
 800126c:	2303      	movs	r3, #3
 800126e:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8001270:	e1fe      	b.n	8001670 <main+0x5e8>
			}
			else
			{
				tranState=2;
 8001272:	2302      	movs	r3, #2
 8001274:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8001276:	e1fb      	b.n	8001670 <main+0x5e8>
			}

		case 3:
			printEnterpin();//function to print enter pin
 8001278:	f7ff fea4 	bl	8000fc4 <printEnterpin>
			printf("Enter pin\r\n");
 800127c:	4855      	ldr	r0, [pc, #340]	; (80013d4 <main+0x34c>)
 800127e:	f003 f80d 	bl	800429c <puts>
			//getting input from all the buttons for first number of password
			pA3 = deBounceReadPin(pin, port, mode);
 8001282:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001286:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800128a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fc55 	bl	8000b3c <deBounceReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			pA4 = deBounceReadPin2(pin2, port, mode);
 8001298:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800129c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80012a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fcc6 	bl	8000c34 <deBounceReadPin2>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			pA7 = deBounceReadPin3(pin3, port, mode);
 80012ae:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80012b2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80012b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd37 	bl	8000d2c <deBounceReadPin3>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    pA8 = deBounceReadPin4(pin4, port, mode);
 80012c4:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80012c8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80012cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fda8 	bl	8000e24 <deBounceReadPin4>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 3020 	strb.w	r3, [r7, #32]
		    if(pA3==0)
 80012da:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <main+0x264>
		    {
		    	passWord[0]=1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	803b      	strh	r3, [r7, #0]
		    	tranState=4;
 80012e6:	2304      	movs	r3, #4
 80012e8:	86fb      	strh	r3, [r7, #54]	; 0x36
		    	break;
 80012ea:	e1c1      	b.n	8001670 <main+0x5e8>
		    }
		    else if(pA4==0)
 80012ec:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d104      	bne.n	80012fe <main+0x276>
		    {
		    	passWord[0]=2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	803b      	strh	r3, [r7, #0]
		    	tranState=4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	86fb      	strh	r3, [r7, #54]	; 0x36
		    	break;
 80012fc:	e1b8      	b.n	8001670 <main+0x5e8>
		    }
		    else if (pA7==0)
 80012fe:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001302:	2b00      	cmp	r3, #0
 8001304:	d104      	bne.n	8001310 <main+0x288>
		    {
		    	passWord[0]=3;
 8001306:	2303      	movs	r3, #3
 8001308:	803b      	strh	r3, [r7, #0]
		    	tranState=4;
 800130a:	2304      	movs	r3, #4
 800130c:	86fb      	strh	r3, [r7, #54]	; 0x36
		    	break;
 800130e:	e1af      	b.n	8001670 <main+0x5e8>
		    }
		    else
		    {
		    	tranState=3;
 8001310:	2303      	movs	r3, #3
 8001312:	86fb      	strh	r3, [r7, #54]	; 0x36
		    	break;
 8001314:	e1ac      	b.n	8001670 <main+0x5e8>
		    }

		case 4:
			    HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 8001316:	2101      	movs	r1, #1
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fa93 	bl	8000844 <HD44780_GotoXY>
				HD44780_PutStr("*");//printing *
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <main+0x350>)
 8001320:	f7ff faca 	bl	80008b8 <HD44780_PutStr>
				HAL_Delay(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f000 fcdd 	bl	8001ce4 <HAL_Delay>
				printf("*");
 800132a:	202a      	movs	r0, #42	; 0x2a
 800132c:	f002 ff46 	bl	80041bc <putchar>
				//getting input from all the buttons for second number of password
				pA3 = deBounceReadPin(pin, port, mode);
 8001330:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001334:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001338:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fbfe 	bl	8000b3c <deBounceReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		        pA4 = deBounceReadPin2(pin2, port, mode);
 8001346:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800134a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800134e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fc6f 	bl	8000c34 <deBounceReadPin2>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		        pA7 = deBounceReadPin3(pin3, port, mode);
 800135c:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001360:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fce0 	bl	8000d2c <deBounceReadPin3>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		        pA8 = deBounceReadPin4(pin4, port, mode);
 8001372:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001376:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800137a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fd51 	bl	8000e24 <deBounceReadPin4>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3020 	strb.w	r3, [r7, #32]
		        if(pA3==0)
 8001388:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800138c:	2b00      	cmp	r3, #0
 800138e:	d104      	bne.n	800139a <main+0x312>
		        {
	    	     passWord[1]=1;
 8001390:	2301      	movs	r3, #1
 8001392:	807b      	strh	r3, [r7, #2]
	    	     tranState=5;
 8001394:	2305      	movs	r3, #5
 8001396:	86fb      	strh	r3, [r7, #54]	; 0x36
	    	     break;
 8001398:	e16a      	b.n	8001670 <main+0x5e8>
	            }
	          else if(pA4==0)
 800139a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d104      	bne.n	80013ac <main+0x324>
	           {
	     	     passWord[1]=2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	807b      	strh	r3, [r7, #2]
	    	     tranState=5;
 80013a6:	2305      	movs	r3, #5
 80013a8:	86fb      	strh	r3, [r7, #54]	; 0x36
	    	     break;
 80013aa:	e161      	b.n	8001670 <main+0x5e8>
	            }
	         else if (pA7==0)
 80013ac:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <main+0x336>
	          {
	        	passWord[1]=3;
 80013b4:	2303      	movs	r3, #3
 80013b6:	807b      	strh	r3, [r7, #2]
	        	tranState=5;
 80013b8:	2305      	movs	r3, #5
 80013ba:	86fb      	strh	r3, [r7, #54]	; 0x36
	    	    break;
 80013bc:	e158      	b.n	8001670 <main+0x5e8>
	          }
	         else
	         {
	        	tranState=4;
 80013be:	2304      	movs	r3, #4
 80013c0:	86fb      	strh	r3, [r7, #54]	; 0x36
	        	break;
 80013c2:	e155      	b.n	8001670 <main+0x5e8>
 80013c4:	08005280 	.word	0x08005280
 80013c8:	08005194 	.word	0x08005194
 80013cc:	080051a0 	.word	0x080051a0
 80013d0:	080051bc 	.word	0x080051bc
 80013d4:	080051e8 	.word	0x080051e8
 80013d8:	080051f4 	.word	0x080051f4
	         }
		case 5:
			HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 80013dc:	2101      	movs	r1, #1
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fa30 	bl	8000844 <HD44780_GotoXY>
			HD44780_PutStr("**");
 80013e4:	48a3      	ldr	r0, [pc, #652]	; (8001674 <main+0x5ec>)
 80013e6:	f7ff fa67 	bl	80008b8 <HD44780_PutStr>
			printf("*");
 80013ea:	202a      	movs	r0, #42	; 0x2a
 80013ec:	f002 fee6 	bl	80041bc <putchar>
			HAL_Delay(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f000 fc77 	bl	8001ce4 <HAL_Delay>
			//getting input from all the buttons for third number of password
			pA3 = deBounceReadPin(pin, port, mode);
 80013f6:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80013fa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80013fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fb9b 	bl	8000b3c <deBounceReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	        pA4 = deBounceReadPin2(pin2, port, mode);
 800140c:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001410:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001414:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc0c 	bl	8000c34 <deBounceReadPin2>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	        pA7 = deBounceReadPin3(pin3, port, mode);
 8001422:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001426:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800142a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fc7d 	bl	8000d2c <deBounceReadPin3>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	        pA8 = deBounceReadPin4(pin4, port, mode);
 8001438:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 800143c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fcee 	bl	8000e24 <deBounceReadPin4>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 3020 	strb.w	r3, [r7, #32]
	        if(pA3==0)
 800144e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <main+0x3d8>
	        {
    	     passWord[2]=1;
 8001456:	2301      	movs	r3, #1
 8001458:	80bb      	strh	r3, [r7, #4]
    	     tranState=6;
 800145a:	2306      	movs	r3, #6
 800145c:	86fb      	strh	r3, [r7, #54]	; 0x36
    	     break;
 800145e:	e107      	b.n	8001670 <main+0x5e8>
            }
          else if(pA4==0)
 8001460:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <main+0x3ea>
           {
     	     passWord[2]=2;
 8001468:	2302      	movs	r3, #2
 800146a:	80bb      	strh	r3, [r7, #4]
    	     tranState=6;
 800146c:	2306      	movs	r3, #6
 800146e:	86fb      	strh	r3, [r7, #54]	; 0x36
    	     break;
 8001470:	e0fe      	b.n	8001670 <main+0x5e8>
            }
         else if (pA7==0)
 8001472:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <main+0x3fc>
          {
        	passWord[2]=3;
 800147a:	2303      	movs	r3, #3
 800147c:	80bb      	strh	r3, [r7, #4]
        	tranState=6;
 800147e:	2306      	movs	r3, #6
 8001480:	86fb      	strh	r3, [r7, #54]	; 0x36
    	    break;
 8001482:	e0f5      	b.n	8001670 <main+0x5e8>
          }
         else
         {
        	tranState=5;
 8001484:	2305      	movs	r3, #5
 8001486:	86fb      	strh	r3, [r7, #54]	; 0x36
        	break;
 8001488:	e0f2      	b.n	8001670 <main+0x5e8>
         }
		case 6:
			HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 800148a:	2101      	movs	r1, #1
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff f9d9 	bl	8000844 <HD44780_GotoXY>
			HD44780_PutStr("***");
 8001492:	4879      	ldr	r0, [pc, #484]	; (8001678 <main+0x5f0>)
 8001494:	f7ff fa10 	bl	80008b8 <HD44780_PutStr>
			printf("*");
 8001498:	202a      	movs	r0, #42	; 0x2a
 800149a:	f002 fe8f 	bl	80041bc <putchar>
			HAL_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 fc20 	bl	8001ce4 <HAL_Delay>
			//getting input from all the buttons for fourth number of password
			pA3 = deBounceReadPin(pin, port, mode);
 80014a4:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80014a8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80014ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fb44 	bl	8000b3c <deBounceReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	        pA4 = deBounceReadPin2(pin2, port, mode);
 80014ba:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80014be:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fbb5 	bl	8000c34 <deBounceReadPin2>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	        pA7 = deBounceReadPin3(pin3, port, mode);
 80014d0:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80014d4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80014d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc26 	bl	8000d2c <deBounceReadPin3>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	        pA8 = deBounceReadPin4(pin4, port, mode);
 80014e6:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 80014ea:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80014ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc97 	bl	8000e24 <deBounceReadPin4>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3020 	strb.w	r3, [r7, #32]
	        if(pA3==0)
 80014fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001500:	2b00      	cmp	r3, #0
 8001502:	d104      	bne.n	800150e <main+0x486>
	        {
    	     passWord[3]=1;
 8001504:	2301      	movs	r3, #1
 8001506:	80fb      	strh	r3, [r7, #6]
    	     tranState=7;
 8001508:	2307      	movs	r3, #7
 800150a:	86fb      	strh	r3, [r7, #54]	; 0x36
    	     break;
 800150c:	e0b0      	b.n	8001670 <main+0x5e8>
            }
          else if(pA4==0)
 800150e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <main+0x498>
           {
     	     passWord[3]=2;
 8001516:	2302      	movs	r3, #2
 8001518:	80fb      	strh	r3, [r7, #6]
    	     tranState=7;
 800151a:	2307      	movs	r3, #7
 800151c:	86fb      	strh	r3, [r7, #54]	; 0x36
    	     break;
 800151e:	e0a7      	b.n	8001670 <main+0x5e8>
            }
         else if (pA7==0)
 8001520:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001524:	2b00      	cmp	r3, #0
 8001526:	d104      	bne.n	8001532 <main+0x4aa>
          {
        	passWord[3]=3;
 8001528:	2303      	movs	r3, #3
 800152a:	80fb      	strh	r3, [r7, #6]
        	tranState=7;
 800152c:	2307      	movs	r3, #7
 800152e:	86fb      	strh	r3, [r7, #54]	; 0x36
    	    break;
 8001530:	e09e      	b.n	8001670 <main+0x5e8>
          }
         else
         {
        	tranState=6;
 8001532:	2306      	movs	r3, #6
 8001534:	86fb      	strh	r3, [r7, #54]	; 0x36
        	break;
 8001536:	e09b      	b.n	8001670 <main+0x5e8>
         }
			

		case 7:
			HD44780_GotoXY(0, 1); //set cursor to the second row of the lcd
 8001538:	2101      	movs	r1, #1
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff f982 	bl	8000844 <HD44780_GotoXY>
			HD44780_PutStr("****");
 8001540:	484e      	ldr	r0, [pc, #312]	; (800167c <main+0x5f4>)
 8001542:	f7ff f9b9 	bl	80008b8 <HD44780_PutStr>
			printf("*");
 8001546:	202a      	movs	r0, #42	; 0x2a
 8001548:	f002 fe38 	bl	80041bc <putchar>
			HAL_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f000 fbc9 	bl	8001ce4 <HAL_Delay>
			//getting input from ok button
			pA8 = deBounceReadPin4(pin4, port, mode);
 8001552:	f997 2024 	ldrsb.w	r2, [r7, #36]	; 0x24
 8001556:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800155a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc61 	bl	8000e24 <deBounceReadPin4>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3020 	strb.w	r3, [r7, #32]
		    if(pA8==0)
 8001568:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <main+0x4ee>
			{
			 tranState=8;
 8001570:	2308      	movs	r3, #8
 8001572:	86fb      	strh	r3, [r7, #54]	; 0x36
			 break;
 8001574:	e07c      	b.n	8001670 <main+0x5e8>
		    }
			else
			{
			tranState=7;
 8001576:	2307      	movs	r3, #7
 8001578:	86fb      	strh	r3, [r7, #54]	; 0x36
			break;
 800157a:	e079      	b.n	8001670 <main+0x5e8>
		    }
		case 8:
			//print processing
			printProcessing();
 800157c:	f7ff fd30 	bl	8000fe0 <printProcessing>
			//converting ented password into interger value
			for(i=0;i<4;i++)
 8001580:	2300      	movs	r3, #0
 8001582:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001584:	e019      	b.n	80015ba <main+0x532>
			{
				passwordInt= passwordInt*10;
 8001586:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001588:	461a      	mov	r2, r3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	85fb      	strh	r3, [r7, #46]	; 0x2e
				passwordInt= passwordInt+passWord[i];
 8001594:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800159e:	4413      	add	r3, r2
 80015a0:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015a8:	4413      	add	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
			for(i=0;i<4;i++)
 80015ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80015ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015be:	2b03      	cmp	r3, #3
 80015c0:	dde1      	ble.n	8001586 <main+0x4fe>
			}
			printf("Entered password=%d\r\n",passwordInt);
 80015c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015c6:	4619      	mov	r1, r3
 80015c8:	482d      	ldr	r0, [pc, #180]	; (8001680 <main+0x5f8>)
 80015ca:	f002 fddf 	bl	800418c <iprintf>
			tranState=9;
 80015ce:	2309      	movs	r3, #9
 80015d0:	86fb      	strh	r3, [r7, #54]	; 0x36
			break;
 80015d2:	e04d      	b.n	8001670 <main+0x5e8>

		case 9:
			//checking for the passcode match
            for(j=0;j<9;j++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	867b      	strh	r3, [r7, #50]	; 0x32
 80015d8:	e013      	b.n	8001602 <main+0x57a>
            {
            	if(passCode[j]==passwordInt)
 80015da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015e4:	4413      	add	r3, r2
 80015e6:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80015ea:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d101      	bne.n	80015f6 <main+0x56e>
            	{
            		flag=1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	863b      	strh	r3, [r7, #48]	; 0x30
            for(j=0;j<9;j++)
 80015f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	867b      	strh	r3, [r7, #50]	; 0x32
 8001602:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001606:	2b08      	cmp	r3, #8
 8001608:	dde7      	ble.n	80015da <main+0x552>
            	}
            }
            if(flag==1)
 800160a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <main+0x590>
            {
            	tranState=11;
 8001612:	230b      	movs	r3, #11
 8001614:	86fb      	strh	r3, [r7, #54]	; 0x36
            	break;
 8001616:	e02b      	b.n	8001670 <main+0x5e8>
            }
            else
            {
            	tranState=10;
 8001618:	230a      	movs	r3, #10
 800161a:	86fb      	strh	r3, [r7, #54]	; 0x36
            	break;
 800161c:	e028      	b.n	8001670 <main+0x5e8>
            }

		case 10:
			//printing incorrect pin
			printIncorrect();
 800161e:	f7ff fcf3 	bl	8001008 <printIncorrect>
			printf("Incorrect pin\r\n");
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <main+0x5fc>)
 8001624:	f002 fe3a 	bl	800429c <puts>
			tranState=13;
 8001628:	230d      	movs	r3, #13
 800162a:	86fb      	strh	r3, [r7, #54]	; 0x36
			break;
 800162c:	e020      	b.n	8001670 <main+0x5e8>

		case 11:
			//checking for minimum balance
			if(passwordInt==3333)
 800162e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001632:	f640 5205 	movw	r2, #3333	; 0xd05
 8001636:	4293      	cmp	r3, r2
 8001638:	d102      	bne.n	8001640 <main+0x5b8>
			{
				tranState=12;
 800163a:	230c      	movs	r3, #12
 800163c:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 800163e:	e017      	b.n	8001670 <main+0x5e8>
			}
			else
			{   //printing transaction approved
				printApproved();
 8001640:	f7ff fcf2 	bl	8001028 <printApproved>
				printf("Approved\r\n Thank you\r\n");
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <main+0x600>)
 8001646:	f002 fe29 	bl	800429c <puts>
				tranState=0;
 800164a:	2300      	movs	r3, #0
 800164c:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 800164e:	e00f      	b.n	8001670 <main+0x5e8>
			}
		case 12:
			printNobalance();
 8001650:	f7ff fd02 	bl	8001058 <printNobalance>
			printf("Insufficinet \r\n Balance\r\n");
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <main+0x604>)
 8001656:	f002 fe21 	bl	800429c <puts>
			tranState=13;
 800165a:	230d      	movs	r3, #13
 800165c:	86fb      	strh	r3, [r7, #54]	; 0x36
			break;
 800165e:	e007      	b.n	8001670 <main+0x5e8>

		case 13:
			 printCancelled();//function call to print cancel statement
 8001660:	f7ff fc98 	bl	8000f94 <printCancelled>
			 printf("Transaction\r\n Cancelled\r\n");
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <main+0x608>)
 8001666:	f002 fe19 	bl	800429c <puts>
			 tranState=0;
 800166a:	2300      	movs	r3, #0
 800166c:	86fb      	strh	r3, [r7, #54]	; 0x36
 	         break;
 800166e:	bf00      	nop
     switch(tranState)//switch statement for state machine
 8001670:	e56a      	b.n	8001148 <main+0xc0>
 8001672:	bf00      	nop
 8001674:	080051f8 	.word	0x080051f8
 8001678:	080051fc 	.word	0x080051fc
 800167c:	08005200 	.word	0x08005200
 8001680:	08005208 	.word	0x08005208
 8001684:	08005220 	.word	0x08005220
 8001688:	08005230 	.word	0x08005230
 800168c:	08005248 	.word	0x08005248
 8001690:	08005264 	.word	0x08005264

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ac      	sub	sp, #176	; 0xb0
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800169e:	2244      	movs	r2, #68	; 0x44
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fd6a 	bl	800417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2254      	movs	r2, #84	; 0x54
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fd5c 	bl	800417c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016c4:	f000 fdb0 	bl	8002228 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <SystemClock_Config+0x100>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <SystemClock_Config+0x100>)
 80016d0:	f023 0318 	bic.w	r3, r3, #24
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016d8:	2314      	movs	r3, #20
 80016da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001704:	2310      	movs	r3, #16
 8001706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800170a:	2307      	movs	r3, #7
 800170c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fdf5 	bl	8002310 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800172c:	f000 f8bc 	bl	80018a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2303      	movs	r3, #3
 8001736:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fa00 	bl	8002b50 <HAL_RCC_ClockConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001756:	f000 f8a7 	bl	80018a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800175a:	2302      	movs	r3, #2
 800175c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fbf7 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001770:	f000 f89a 	bl	80018a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001778:	f000 fd74 	bl	8002264 <HAL_PWREx_ControlVoltageScaling>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001782:	f000 f891 	bl	80018a8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001786:	f001 fdd9 	bl	800333c <HAL_RCCEx_EnableMSIPLLMode>
}
 800178a:	bf00      	nop
 800178c:	37b0      	adds	r7, #176	; 0xb0
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_USART2_UART_Init+0x5c>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017dc:	f001 feae 	bl	800353c <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017e6:	f000 f85f 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000098 	.word	0x20000098
 80017f4:	40004400 	.word	0x40004400

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_GPIO_Init+0xa8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <MX_GPIO_Init+0xa8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_GPIO_Init+0xa8>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_GPIO_Init+0xa8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4 
 8001856:	2200      	movs	r2, #0
 8001858:	21fb      	movs	r1, #251	; 0xfb
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_GPIO_Init+0xac>)
 800185c:	f000 fccc 	bl	80021f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8001860:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f000 fb3c 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4 
 800187c:	23fb      	movs	r3, #251	; 0xfb
 800187e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001894:	f000 fb2e 	bl	8001ef4 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000400 	.word	0x48000400

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x44>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_MspInit+0x44>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_MspInit+0x44>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x44>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x44>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x44>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <HAL_UART_MspInit+0xa0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d13a      	bne.n	8001998 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0xa4>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001952:	2304      	movs	r3, #4
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001962:	2307      	movs	r3, #7
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f000 fac0 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001986:	2303      	movs	r3, #3
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f000 faae 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40004400 	.word	0x40004400
 80019a4:	40021000 	.word	0x40021000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 f954 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001a10:	2301      	movs	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_read+0x38>)
 8001a20:	f001 fe6d 	bl	80036fe <HAL_UART_Receive>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	607b      	str	r3, [r7, #4]

	return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000098 	.word	0x20000098

08001a40 <_write>:

int _write(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <_write+0x40>)
 8001a5c:	f001 fdbc 	bl	80035d8 <HAL_UART_Transmit>
 8001a60:	4603      	mov	r3, r0
 8001a62:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <_write+0x30>
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d101      	bne.n	8001a74 <_write+0x34>
	{
		Error_Handler();
 8001a70:	f7ff ff1a 	bl	80018a8 <Error_Handler>
	}

	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000098 	.word	0x20000098

08001a84 <_close>:



int _close(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aac:	605a      	str	r2, [r3, #4]
	return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_isatty>:

int _isatty(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
	return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x50>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x16>
		heap_end = &end;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <_sbrk+0x50>)
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <_sbrk+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <_sbrk+0x50>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <_sbrk+0x50>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	466a      	mov	r2, sp
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d907      	bls.n	8001b26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b16:	f002 fb07 	bl	8004128 <__errno>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	e006      	b.n	8001b34 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <_sbrk+0x50>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <_sbrk+0x50>)
 8001b30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000008c 	.word	0x2000008c
 8001b40:	20000120 	.word	0x20000120

08001b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <SystemInit+0x64>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <SystemInit+0x64>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <SystemInit+0x68>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <SystemInit+0x68>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <SystemInit+0x68>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <SystemInit+0x68>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <SystemInit+0x68>)
 8001b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <SystemInit+0x68>)
 8001b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <SystemInit+0x68>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <SystemInit+0x68>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <SystemInit+0x68>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SystemInit+0x64>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	40021000 	.word	0x40021000

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bb6:	e003      	b.n	8001bc0 <LoopCopyDataInit>

08001bb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bbe:	3104      	adds	r1, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bc8:	d3f6      	bcc.n	8001bb8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bcc:	e002      	b.n	8001bd4 <LoopFillZerobss>

08001bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd0:	f842 3b04 	str.w	r3, [r2], #4

08001bd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <LoopForever+0x16>)
	cmp	r2, r3
 8001bd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bd8:	d3f9      	bcc.n	8001bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bda:	f7ff ffb3 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f002 faa9 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff fa51 	bl	8001088 <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001bec:	08005384 	.word	0x08005384
	ldr	r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001bf8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001bfc:	20000120 	.word	0x20000120

08001c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_IRQHandler>

08001c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f93d 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f80e 	bl	8001c34 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	e001      	b.n	8001c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c24:	f7ff fe48 	bl	80018b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_InitTick+0x68>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d022      	beq.n	8001c8e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_InitTick+0x6c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_InitTick+0x68>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f93c 	bl	8001eda <HAL_SYSTICK_Config>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	d809      	bhi.n	8001c82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	f04f 30ff 	mov.w	r0, #4294967295
 8001c76:	f000 f914 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_InitTick+0x70>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e007      	b.n	8001c92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e004      	b.n	8001c92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000118 	.word	0x20000118
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000118 	.word	0x20000118

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d004      	beq.n	8001d08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_Delay+0x40>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d08:	bf00      	nop
 8001d0a:	f7ff ffdf 	bl	8001ccc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d8f7      	bhi.n	8001d0a <HAL_Delay+0x26>
  {
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff47 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff5c 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb0 	bl	8001e48 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e148      	b.n	8002196 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 813a 	beq.w	8002190 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d00b      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d130      	bne.n	8001f9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f72:	2201      	movs	r2, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	f003 0201 	and.w	r2, r3, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0xea>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0203 	and.w	r2, r3, #3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8094 	beq.w	8002190 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x2c0>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_GPIO_Init+0x2c0>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6613      	str	r3, [r2, #96]	; 0x60
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x2c0>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002080:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1d4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a43      	ldr	r2, [pc, #268]	; (80021bc <HAL_GPIO_Init+0x2c8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1d0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020bc:	2302      	movs	r3, #2
 80020be:	e004      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c0:	2307      	movs	r3, #7
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c8:	2300      	movs	r3, #0
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020da:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020e8:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210c:	4a2d      	ldr	r2, [pc, #180]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f aeaf 	bne.w	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	48000400 	.word	0x48000400
 80021c0:	48000800 	.word	0x48000800
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007000 	.word	0x40007000

08002248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_PWREx_GetVoltageRange+0x18>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002272:	d130      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	d038      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2232      	movs	r2, #50	; 0x32
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	3301      	adds	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a8:	e002      	b.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022bc:	d102      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f2      	bne.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	d110      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e00f      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d007      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40007000 	.word	0x40007000
 8002308:	20000000 	.word	0x20000000
 800230c:	431bde83 	.word	0x431bde83

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f000 bc11 	b.w	8002b46 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002324:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232e:	4b9e      	ldr	r3, [pc, #632]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80e4 	beq.w	800250e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_RCC_OscConfig+0x4c>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	f040 808b 	bne.w	800246a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	f040 8087 	bne.w	800246a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x64>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e3e8      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_RCC_OscConfig+0x7e>
 8002384:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	e005      	b.n	800239a <HAL_RCC_OscConfig+0x8a>
 800238e:	4b86      	ldr	r3, [pc, #536]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239a:	4293      	cmp	r3, r2
 800239c:	d223      	bcs.n	80023e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd78 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3c9      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b2:	4b7d      	ldr	r3, [pc, #500]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7c      	ldr	r2, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4977      	ldr	r1, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	4b75      	ldr	r3, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4972      	ldr	r1, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e025      	b.n	8002432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6f      	ldr	r2, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	4965      	ldr	r1, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fd38 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e389      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002432:	f000 fc6f 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a5a      	ldr	r2, [pc, #360]	; (80025ac <HAL_RCC_OscConfig+0x29c>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	fa21 f303 	lsr.w	r3, r1, r3
 800244e:	4a58      	ldr	r2, [pc, #352]	; (80025b0 <HAL_RCC_OscConfig+0x2a0>)
 8002450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002452:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_RCC_OscConfig+0x2a4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fbec 	bl	8001c34 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d052      	beq.n	800250c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	e36d      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d032      	beq.n	80024d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800247e:	f7ff fc25 	bl	8001ccc <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002486:	f7ff fc21 	bl	8001ccc <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e356      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	493a      	ldr	r1, [pc, #232]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c2:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	e01a      	b.n	800250e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fbf2 	bl	8001ccc <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ec:	f7ff fbee 	bl	8001ccc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e323      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1dc>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d073      	beq.n	8002602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x21c>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d10e      	bne.n	8002544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d10b      	bne.n	8002544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d063      	beq.n	8002600 <HAL_RCC_OscConfig+0x2f0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d15f      	bne.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e300      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x24c>
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e01d      	b.n	8002598 <HAL_RCC_OscConfig+0x288>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x270>
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x288>
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_RCC_OscConfig+0x298>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff fb94 	bl	8001ccc <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	e010      	b.n	80025ca <HAL_RCC_OscConfig+0x2ba>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08005294 	.word	0x08005294
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fb88 	bl	8001ccc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e2bd      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ca:	4baf      	ldr	r3, [pc, #700]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2a8>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb78 	bl	8001ccc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fb74 	bl	8001ccc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e2a9      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f2:	4ba5      	ldr	r3, [pc, #660]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2d0>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d060      	beq.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x310>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d119      	bne.n	800264e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d116      	bne.n	800264e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002620:	4b99      	ldr	r3, [pc, #612]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x328>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e286      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b93      	ldr	r3, [pc, #588]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	4990      	ldr	r1, [pc, #576]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264c:	e040      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d023      	beq.n	800269e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002656:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8b      	ldr	r2, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff fb33 	bl	8001ccc <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fb2f 	bl	8001ccc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e264      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267c:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	497c      	ldr	r1, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e018      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b7a      	ldr	r3, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a79      	ldr	r2, [pc, #484]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff fb0f 	bl	8001ccc <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff fb0b 	bl	8001ccc <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e240      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c4:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d03c      	beq.n	8002756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ea:	4a67      	ldr	r2, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7ff faea 	bl	8001ccc <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff fae6 	bl	8001ccc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e21b      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <HAL_RCC_OscConfig+0x3ec>
 800271c:	e01b      	b.n	8002756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff facd 	bl	8001ccc <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7ff fac9 	bl	8001ccc <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1fe      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ef      	bne.n	8002736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80a6 	beq.w	80028b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002768:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a43      	ldr	r2, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278c:	2301      	movs	r3, #1
 800278e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_OscConfig+0x57c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d118      	bne.n	80027ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x57c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3a      	ldr	r2, [pc, #232]	; (800288c <HAL_RCC_OscConfig+0x57c>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa90 	bl	8001ccc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7ff fa8c 	bl	8001ccc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1c1      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCC_OscConfig+0x57c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4d8>
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e6:	e024      	b.n	8002832 <HAL_RCC_OscConfig+0x522>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d110      	bne.n	8002812 <HAL_RCC_OscConfig+0x502>
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	4a20      	ldr	r2, [pc, #128]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002810:	e00f      	b.n	8002832 <HAL_RCC_OscConfig+0x522>
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7ff fa47 	bl	8001ccc <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fa43 	bl	8001ccc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e176      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x578>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0ed      	beq.n	8002842 <HAL_RCC_OscConfig+0x532>
 8002866:	e01a      	b.n	800289e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff fa30 	bl	8001ccc <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff fa2c 	bl	8001ccc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d906      	bls.n	8002890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e15f      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002890:	4baa      	ldr	r3, [pc, #680]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e8      	bne.n	8002870 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4ba5      	ldr	r3, [pc, #660]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4aa4      	ldr	r2, [pc, #656]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03c      	beq.n	8002936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01c      	beq.n	80028fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c4:	4b9d      	ldr	r3, [pc, #628]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80028c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ca:	4a9c      	ldr	r2, [pc, #624]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f9fa 	bl	8001ccc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028dc:	f7ff f9f6 	bl	8001ccc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e12b      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ee:	4b93      	ldr	r3, [pc, #588]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80028f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ef      	beq.n	80028dc <HAL_RCC_OscConfig+0x5cc>
 80028fc:	e01b      	b.n	8002936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fe:	4b8f      	ldr	r3, [pc, #572]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002904:	4a8d      	ldr	r2, [pc, #564]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7ff f9dd 	bl	8001ccc <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002916:	f7ff f9d9 	bl	8001ccc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e10e      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002928:	4b84      	ldr	r3, [pc, #528]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 800292a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ef      	bne.n	8002916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8102 	beq.w	8002b44 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b02      	cmp	r3, #2
 8002946:	f040 80c5 	bne.w	8002ad4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800294a:	4b7c      	ldr	r3, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	429a      	cmp	r2, r3
 800295c:	d12c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	3b01      	subs	r3, #1
 800296a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d123      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d11b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d113      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	3b01      	subs	r3, #1
 80029b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d067      	beq.n	8002a88 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d062      	beq.n	8002a84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0bb      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029da:	f7ff f977 	bl	8001ccc <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff f973 	bl	8001ccc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0a8      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f4:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	4b4e      	ldr	r3, [pc, #312]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	4b4e      	ldr	r3, [pc, #312]	; (8002b40 <HAL_RCC_OscConfig+0x830>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a1a:	0212      	lsls	r2, r2, #8
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a22:	0852      	lsrs	r2, r2, #1
 8002a24:	3a01      	subs	r2, #1
 8002a26:	0552      	lsls	r2, r2, #21
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a2e:	0852      	lsrs	r2, r2, #1
 8002a30:	3a01      	subs	r2, #1
 8002a32:	0652      	lsls	r2, r2, #25
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a3a:	06d2      	lsls	r2, r2, #27
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	493f      	ldr	r1, [pc, #252]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a39      	ldr	r2, [pc, #228]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a5c:	f7ff f936 	bl	8001ccc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff f932 	bl	8001ccc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a82:	e05f      	b.n	8002b44 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e05e      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d157      	bne.n	8002b44 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aac:	f7ff f90e 	bl	8001ccc <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7ff f90a 	bl	8001ccc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e03f      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x7a4>
 8002ad2:	e037      	b.n	8002b44 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d02d      	beq.n	8002b36 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002af8:	f023 0303 	bic.w	r3, r3, #3
 8002afc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7ff f8dd 	bl	8001ccc <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7ff f8d9 	bl	8001ccc <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e00e      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_RCC_OscConfig+0x82c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x806>
 8002b34:	e006      	b.n	8002b44 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_OscConfig+0x836>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0c8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4961      	ldr	r1, [pc, #388]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b0      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d04c      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba8:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d121      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e09e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d115      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e092      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e086      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e07e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 0203 	bic.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	493f      	ldr	r1, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7ff f85f 	bl	8001ccc <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c12:	f7ff f85b 	bl	8001ccc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e066      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 020c 	and.w	r2, r3, #12
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d1eb      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	492c      	ldr	r1, [pc, #176]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d210      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4924      	ldr	r1, [pc, #144]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e036      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4918      	ldr	r1, [pc, #96]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4910      	ldr	r1, [pc, #64]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc6:	f000 f825 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe ffa2 	bl	8001c34 <HAL_InitTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08005294 	.word	0x08005294
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d11e      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e005      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d64:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d133      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0xaa>
 8002db6:	e005      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dba:	617b      	str	r3, [r7, #20]
      break;
 8002dbc:	e005      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc0:	617b      	str	r3, [r7, #20]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	617b      	str	r3, [r7, #20]
      break;
 8002dc8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	fb02 f203 	mul.w	r2, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0e5b      	lsrs	r3, r3, #25
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3724      	adds	r7, #36	; 0x24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	080052ac 	.word	0x080052ac
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	080052a4 	.word	0x080052a4

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e70:	f7ff ffda 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e74:	4601      	mov	r1, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0adb      	lsrs	r3, r3, #11
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080052a4 	.word	0x080052a4

08002e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f9ca 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
 8002eb6:	e014      	b.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed0:	f7ff f9ba 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8002ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee8:	d10b      	bne.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d919      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ef4:	d902      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e013      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e010      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d902      	bls.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f08:	2303      	movs	r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e00a      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d102      	bne.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f14:	2302      	movs	r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e004      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b70      	cmp	r3, #112	; 0x70
 8002f1e:	d101      	bne.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40022000 	.word	0x40022000

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f82:	d015      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f88:	e00f      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f8a:	4bac      	ldr	r3, [pc, #688]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4aab      	ldr	r2, [pc, #684]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f96:	e00c      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9dc 	bl	800335c <RCCEx_PLLSAI1_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e003      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	74fb      	strb	r3, [r7, #19]
      break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb8:	4ba0      	ldr	r3, [pc, #640]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	499d      	ldr	r1, [pc, #628]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8099 	beq.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe6:	4b95      	ldr	r3, [pc, #596]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b8f      	ldr	r3, [pc, #572]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	4a8e      	ldr	r2, [pc, #568]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	6593      	str	r3, [r2, #88]	; 0x58
 8003008:	4b8c      	ldr	r3, [pc, #560]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003014:	2301      	movs	r3, #1
 8003016:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003018:	4b89      	ldr	r3, [pc, #548]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a88      	ldr	r2, [pc, #544]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003024:	f7fe fe52 	bl	8001ccc <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800302a:	e009      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe fe4e 	bl	8001ccc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	74fb      	strb	r3, [r7, #19]
        break;
 800303e:	e005      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003040:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d155      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003052:	4b7a      	ldr	r3, [pc, #488]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d019      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306e:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	4b70      	ldr	r3, [pc, #448]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	4a6e      	ldr	r2, [pc, #440]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800309a:	4a68      	ldr	r2, [pc, #416]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fe0e 	bl	8001ccc <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fe0a 	bl	8001ccc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
            break;
 80030ca:	e006      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ec      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e0:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	4953      	ldr	r1, [pc, #332]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030f6:	e004      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
 80030fc:	e001      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003102:	7c7b      	ldrb	r3, [r7, #17]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003120:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4943      	ldr	r1, [pc, #268]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f023 020c 	bic.w	r2, r3, #12
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003164:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	4932      	ldr	r1, [pc, #200]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003186:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	4929      	ldr	r1, [pc, #164]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	4921      	ldr	r1, [pc, #132]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4918      	ldr	r1, [pc, #96]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4910      	ldr	r1, [pc, #64]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02c      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322c:	d10a      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322e:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4a02      	ldr	r2, [pc, #8]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003238:	60d3      	str	r3, [r2, #12]
 800323a:	e015      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800324c:	d10c      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f881 	bl	800335c <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d028      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003274:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003292:	d106      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329e:	60d3      	str	r3, [r2, #12]
 80032a0:	e011      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f852 	bl	800335c <RCCEx_PLLSAI1_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01c      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4915      	ldr	r1, [pc, #84]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f0:	d10c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f82f 	bl	800335c <RCCEx_PLLSAI1_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003326:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800332e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000

0800333c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000

0800335c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336a:	4b73      	ldr	r3, [pc, #460]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10d      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
       ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
       ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d044      	beq.n	800342c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e041      	b.n	800342c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d00c      	beq.n	80033ca <RCCEx_PLLSAI1_Config+0x6e>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d013      	beq.n	80033dc <RCCEx_PLLSAI1_Config+0x80>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d120      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033b8:	4b5f      	ldr	r3, [pc, #380]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11d      	bne.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c8:	e01a      	b.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033da:	e013      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033dc:	4b56      	ldr	r3, [pc, #344]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033f8:	e006      	b.n	8003408 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e004      	b.n	800340a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003408:	bf00      	nop
    }

    if(status == HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003410:	4b49      	ldr	r3, [pc, #292]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	3b01      	subs	r3, #1
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	430b      	orrs	r3, r1
 8003426:	4944      	ldr	r1, [pc, #272]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d17c      	bne.n	800352c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003438:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800343c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343e:	f7fe fc45 	bl	8001ccc <HAL_GetTick>
 8003442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003444:	e009      	b.n	800345a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003446:	f7fe fc41 	bl	8001ccc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d902      	bls.n	800345a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	73fb      	strb	r3, [r7, #15]
        break;
 8003458:	e005      	b.n	8003466 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ef      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d15f      	bne.n	800352c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d110      	bne.n	8003494 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003472:	4b31      	ldr	r3, [pc, #196]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800347a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	06d2      	lsls	r2, r2, #27
 800348a:	430a      	orrs	r2, r1
 800348c:	492a      	ldr	r1, [pc, #168]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
 8003492:	e027      	b.n	80034e4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d112      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	0211      	lsls	r1, r2, #8
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6912      	ldr	r2, [r2, #16]
 80034b0:	0852      	lsrs	r2, r2, #1
 80034b2:	3a01      	subs	r2, #1
 80034b4:	0552      	lsls	r2, r2, #21
 80034b6:	430a      	orrs	r2, r1
 80034b8:	491f      	ldr	r1, [pc, #124]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	610b      	str	r3, [r1, #16]
 80034be:	e011      	b.n	80034e4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6892      	ldr	r2, [r2, #8]
 80034d0:	0211      	lsls	r1, r2, #8
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6952      	ldr	r2, [r2, #20]
 80034d6:	0852      	lsrs	r2, r2, #1
 80034d8:	3a01      	subs	r2, #1
 80034da:	0652      	lsls	r2, r2, #25
 80034dc:	430a      	orrs	r2, r1
 80034de:	4916      	ldr	r1, [pc, #88]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fbec 	bl	8001ccc <HAL_GetTick>
 80034f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f6:	e009      	b.n	800350c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f8:	f7fe fbe8 	bl	8001ccc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	73fb      	strb	r3, [r7, #15]
          break;
 800350a:	e005      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4904      	ldr	r1, [pc, #16]	; (8003538 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e040      	b.n	80035d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe f9ce 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f98c 	bl	8003898 <UART_SetConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fc66 	bl	8003e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fced 	bl	8003fa8 <UART_CheckIdleState>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	f040 8081 	bne.w	80036f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_UART_Transmit+0x26>
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e079      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_UART_Transmit+0x38>
 800360c:	2302      	movs	r3, #2
 800360e:	e072      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2221      	movs	r2, #33	; 0x21
 8003622:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003624:	f7fe fb52 	bl	8001ccc <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d108      	bne.n	8003656 <HAL_UART_Transmit+0x7e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e003      	b.n	800365e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003666:	e02d      	b.n	80036c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fcdd 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e039      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003694:	b292      	uxth	r2, r2
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	3302      	adds	r3, #2
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e008      	b.n	80036b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b292      	uxth	r2, r2
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1cb      	bne.n	8003668 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fca9 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e005      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af02      	add	r7, sp, #8
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	2b20      	cmp	r3, #32
 8003714:	f040 80bb 	bne.w	800388e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_UART_Receive+0x26>
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b3      	b.n	8003890 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_UART_Receive+0x38>
 8003732:	2302      	movs	r3, #2
 8003734:	e0ac      	b.n	8003890 <HAL_UART_Receive+0x192>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2222      	movs	r2, #34	; 0x22
 8003748:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800374a:	f7fe fabf 	bl	8001ccc <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d10e      	bne.n	8003788 <HAL_UART_Receive+0x8a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_UART_Receive+0x80>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377c:	e02d      	b.n	80037da <HAL_UART_Receive+0xdc>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003786:	e028      	b.n	80037da <HAL_UART_Receive+0xdc>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_UART_Receive+0xae>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_UART_Receive+0xa4>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	22ff      	movs	r2, #255	; 0xff
 800379c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a0:	e01b      	b.n	80037da <HAL_UART_Receive+0xdc>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	227f      	movs	r2, #127	; 0x7f
 80037a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037aa:	e016      	b.n	80037da <HAL_UART_Receive+0xdc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b4:	d10d      	bne.n	80037d2 <HAL_UART_Receive+0xd4>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Receive+0xca>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	227f      	movs	r2, #127	; 0x7f
 80037c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c6:	e008      	b.n	80037da <HAL_UART_Receive+0xdc>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	223f      	movs	r2, #63	; 0x3f
 80037cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d0:	e003      	b.n	80037da <HAL_UART_Receive+0xdc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d108      	bne.n	80037fe <HAL_UART_Receive+0x100>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e003      	b.n	8003806 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800380e:	e033      	b.n	8003878 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2120      	movs	r1, #32
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fc09 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e032      	b.n	8003890 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10c      	bne.n	800384a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003836:	b29a      	uxth	r2, r3
 8003838:	8a7b      	ldrh	r3, [r7, #18]
 800383a:	4013      	ands	r3, r2
 800383c:	b29a      	uxth	r2, r3
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	3302      	adds	r3, #2
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e00d      	b.n	8003866 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003850:	b29b      	uxth	r3, r3
 8003852:	b2da      	uxtb	r2, r3
 8003854:	8a7b      	ldrh	r3, [r7, #18]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4013      	ands	r3, r2
 800385a:	b2da      	uxtb	r2, r3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1c5      	bne.n	8003810 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4bb3      	ldr	r3, [pc, #716]	; (8003b9c <UART_SetConfig+0x304>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4aa9      	ldr	r2, [pc, #676]	; (8003ba0 <UART_SetConfig+0x308>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4313      	orrs	r3, r2
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4aa0      	ldr	r2, [pc, #640]	; (8003ba4 <UART_SetConfig+0x30c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d126      	bne.n	8003976 <UART_SetConfig+0xde>
 8003928:	4b9f      	ldr	r3, [pc, #636]	; (8003ba8 <UART_SetConfig+0x310>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d81a      	bhi.n	800396c <UART_SetConfig+0xd4>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0xa4>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	0800395d 	.word	0x0800395d
 8003944:	08003955 	.word	0x08003955
 8003948:	08003965 	.word	0x08003965
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e080      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e07c      	b.n	8003a56 <UART_SetConfig+0x1be>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e078      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e074      	b.n	8003a56 <UART_SetConfig+0x1be>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	bf00      	nop
 8003974:	e06f      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a8c      	ldr	r2, [pc, #560]	; (8003bac <UART_SetConfig+0x314>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d138      	bne.n	80039f2 <UART_SetConfig+0x15a>
 8003980:	4b89      	ldr	r3, [pc, #548]	; (8003ba8 <UART_SetConfig+0x310>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d82c      	bhi.n	80039e8 <UART_SetConfig+0x150>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0xfc>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039c9 	.word	0x080039c9
 8003998:	080039e9 	.word	0x080039e9
 800399c:	080039e9 	.word	0x080039e9
 80039a0:	080039e9 	.word	0x080039e9
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039e9 	.word	0x080039e9
 80039ac:	080039e9 	.word	0x080039e9
 80039b0:	080039e9 	.word	0x080039e9
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	080039e9 	.word	0x080039e9
 80039bc:	080039e9 	.word	0x080039e9
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039e1 	.word	0x080039e1
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e042      	b.n	8003a56 <UART_SetConfig+0x1be>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e03e      	b.n	8003a56 <UART_SetConfig+0x1be>
 80039d8:	2304      	movs	r3, #4
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e03a      	b.n	8003a56 <UART_SetConfig+0x1be>
 80039e0:	2308      	movs	r3, #8
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e036      	b.n	8003a56 <UART_SetConfig+0x1be>
 80039e8:	2310      	movs	r3, #16
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	bf00      	nop
 80039f0:	e031      	b.n	8003a56 <UART_SetConfig+0x1be>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6a      	ldr	r2, [pc, #424]	; (8003ba0 <UART_SetConfig+0x308>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d129      	bne.n	8003a50 <UART_SetConfig+0x1b8>
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <UART_SetConfig+0x310>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d014      	beq.n	8003a36 <UART_SetConfig+0x19e>
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	d802      	bhi.n	8003a18 <UART_SetConfig+0x180>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <UART_SetConfig+0x18e>
 8003a16:	e016      	b.n	8003a46 <UART_SetConfig+0x1ae>
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1c:	d007      	beq.n	8003a2e <UART_SetConfig+0x196>
 8003a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a22:	d00c      	beq.n	8003a3e <UART_SetConfig+0x1a6>
 8003a24:	e00f      	b.n	8003a46 <UART_SetConfig+0x1ae>
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2c:	e013      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a34:	e00f      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003a36:	2304      	movs	r3, #4
 8003a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3c:	e00b      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a44:	e007      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003a46:	2310      	movs	r3, #16
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4c:	bf00      	nop
 8003a4e:	e002      	b.n	8003a56 <UART_SetConfig+0x1be>
 8003a50:	2310      	movs	r3, #16
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a51      	ldr	r2, [pc, #324]	; (8003ba0 <UART_SetConfig+0x308>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f040 80fa 	bne.w	8003c56 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d823      	bhi.n	8003ab2 <UART_SetConfig+0x21a>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x1d8>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003aa3 	.word	0x08003aa3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ab3 	.word	0x08003ab3
 8003a90:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7ff f9d4 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003a98:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a9a:	e00d      	b.n	8003ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003a9c:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <UART_SetConfig+0x318>)
 8003a9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003aa0:	e00a      	b.n	8003ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7ff f937 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003aa6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003aa8:	e006      	b.n	8003ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ab0:	e002      	b.n	8003ab8 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	76fb      	strb	r3, [r7, #27]
        break;
 8003ab6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 81c6 	beq.w	8003e4c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d305      	bcc.n	8003adc <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d902      	bls.n	8003ae2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	76fb      	strb	r3, [r7, #27]
 8003ae0:	e1b4      	b.n	8003e4c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8003ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	f200 80a2 	bhi.w	8003c30 <UART_SetConfig+0x398>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <UART_SetConfig+0x25c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003c31 	.word	0x08003c31
 8003afc:	08003b67 	.word	0x08003b67
 8003b00:	08003c31 	.word	0x08003c31
 8003b04:	08003bb9 	.word	0x08003bb9
 8003b08:	08003c31 	.word	0x08003c31
 8003b0c:	08003c31 	.word	0x08003c31
 8003b10:	08003c31 	.word	0x08003c31
 8003b14:	08003c07 	.word	0x08003c07
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7ff f992 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	0214      	lsls	r4, r2, #8
 8003b30:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b34:	020b      	lsls	r3, r1, #8
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	eb13 0b01 	adds.w	fp, r3, r1
 8003b46:	eb44 0c02 	adc.w	ip, r4, r2
 8003b4a:	4658      	mov	r0, fp
 8003b4c:	4661      	mov	r1, ip
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f04f 0400 	mov.w	r4, #0
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	f7fc fb89 	bl	8000270 <__aeabi_uldivmod>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b64:	e067      	b.n	8003c36 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	4910      	ldr	r1, [pc, #64]	; (8003bb4 <UART_SetConfig+0x31c>)
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	eb13 0b01 	adds.w	fp, r3, r1
 8003b7a:	eb44 0c02 	adc.w	ip, r4, r2
 8003b7e:	4658      	mov	r0, fp
 8003b80:	4661      	mov	r1, ip
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	f7fc fb6f 	bl	8000270 <__aeabi_uldivmod>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b98:	e04d      	b.n	8003c36 <UART_SetConfig+0x39e>
 8003b9a:	bf00      	nop
 8003b9c:	efff69f3 	.word	0xefff69f3
 8003ba0:	40008000 	.word	0x40008000
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003bb8:	f7ff f8ac 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003bbc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	0214      	lsls	r4, r2, #8
 8003bd0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bd4:	020b      	lsls	r3, r1, #8
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6852      	ldr	r2, [r2, #4]
 8003bda:	0852      	lsrs	r2, r2, #1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	eb13 0b01 	adds.w	fp, r3, r1
 8003be6:	eb44 0c02 	adc.w	ip, r4, r2
 8003bea:	4658      	mov	r0, fp
 8003bec:	4661      	mov	r1, ip
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fc fb39 	bl	8000270 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c04:	e017      	b.n	8003c36 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003c14:	f144 0100 	adc.w	r1, r4, #0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	f7fc fb24 	bl	8000270 <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c2e:	e002      	b.n	8003c36 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	76fb      	strb	r3, [r7, #27]
            break;
 8003c34:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d308      	bcc.n	8003c50 <UART_SetConfig+0x3b8>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c44:	d204      	bcs.n	8003c50 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	e0fd      	b.n	8003e4c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e0fa      	b.n	8003e4c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5e:	f040 8083 	bne.w	8003d68 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8003c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d85e      	bhi.n	8003d28 <UART_SetConfig+0x490>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0x3d8>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003cd5 	.word	0x08003cd5
 8003c7c:	08003d29 	.word	0x08003d29
 8003c80:	08003cf1 	.word	0x08003cf1
 8003c84:	08003d29 	.word	0x08003d29
 8003c88:	08003d29 	.word	0x08003d29
 8003c8c:	08003d29 	.word	0x08003d29
 8003c90:	08003d11 	.word	0x08003d11
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7ff f8d4 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003c98:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cb2:	e03c      	b.n	8003d2e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7ff f8da 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003cb8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cd2:	e02c      	b.n	8003d2e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003cde:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6852      	ldr	r2, [r2, #4]
 8003ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cee:	e01e      	b.n	8003d2e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf0:	f7ff f810 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003cf4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	005a      	lsls	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d0e:	e00e      	b.n	8003d2e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d26:	e002      	b.n	8003d2e <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	76fb      	strb	r3, [r7, #27]
        break;
 8003d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d916      	bls.n	8003d62 <UART_SetConfig+0x4ca>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d212      	bcs.n	8003d62 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f023 030f 	bic.w	r3, r3, #15
 8003d44:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	89fb      	ldrh	r3, [r7, #14]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	89fa      	ldrh	r2, [r7, #14]
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	e074      	b.n	8003e4c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	76fb      	strb	r3, [r7, #27]
 8003d66:	e071      	b.n	8003e4c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8003d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d85c      	bhi.n	8003e2a <UART_SetConfig+0x592>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <UART_SetConfig+0x4e0>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dd9 	.word	0x08003dd9
 8003d84:	08003e2b 	.word	0x08003e2b
 8003d88:	08003df5 	.word	0x08003df5
 8003d8c:	08003e2b 	.word	0x08003e2b
 8003d90:	08003e2b 	.word	0x08003e2b
 8003d94:	08003e2b 	.word	0x08003e2b
 8003d98:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7ff f850 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003da0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	085a      	lsrs	r2, r3, #1
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003db8:	e03a      	b.n	8003e30 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dba:	f7ff f857 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003dbe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085a      	lsrs	r2, r3, #1
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dd6:	e02b      	b.n	8003e30 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003de2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6852      	ldr	r2, [r2, #4]
 8003dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003df2:	e01d      	b.n	8003e30 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df4:	f7fe ff8e 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003df8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	085a      	lsrs	r2, r3, #1
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	441a      	add	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e10:	e00e      	b.n	8003e30 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e28:	e002      	b.n	8003e30 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	76fb      	strb	r3, [r7, #27]
        break;
 8003e2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d908      	bls.n	8003e48 <UART_SetConfig+0x5b0>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d204      	bcs.n	8003e48 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e001      	b.n	8003e4c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e58:	7efb      	ldrb	r3, [r7, #27]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f62:	d10a      	bne.n	8003f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fb6:	f7fd fe89 	bl	8001ccc <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d10e      	bne.n	8003fe8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f82a 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e020      	b.n	800402a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d10e      	bne.n	8004014 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f814 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e00a      	b.n	800402a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004042:	e05d      	b.n	8004100 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d059      	beq.n	8004100 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404c:	f7fd fe3e 	bl	8001ccc <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <UART_WaitOnFlagUntilTimeout+0x30>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11b      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004070:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e042      	b.n	8004120 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02b      	beq.n	8004100 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d123      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e00f      	b.n	8004120 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d092      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	; (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000000c 	.word	0x2000000c

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4e0d      	ldr	r6, [pc, #52]	; (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	; (8004170 <__libc_init_array+0x3c>)
 800413a:	1ba4      	subs	r4, r4, r6
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2500      	movs	r5, #0
 8004140:	42a5      	cmp	r5, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4e0b      	ldr	r6, [pc, #44]	; (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	; (8004178 <__libc_init_array+0x44>)
 8004148:	f000 ffb2 	bl	80050b0 <_init>
 800414c:	1ba4      	subs	r4, r4, r6
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2500      	movs	r5, #0
 8004152:	42a5      	cmp	r5, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800415c:	4798      	blx	r3
 800415e:	3501      	adds	r5, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004166:	4798      	blx	r3
 8004168:	3501      	adds	r5, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	0800537c 	.word	0x0800537c
 8004170:	0800537c 	.word	0x0800537c
 8004174:	0800537c 	.word	0x0800537c
 8004178:	08005380 	.word	0x08005380

0800417c <memset>:
 800417c:	4402      	add	r2, r0
 800417e:	4603      	mov	r3, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	f803 1b01 	strb.w	r1, [r3], #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <iprintf>:
 800418c:	b40f      	push	{r0, r1, r2, r3}
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <iprintf+0x2c>)
 8004190:	b513      	push	{r0, r1, r4, lr}
 8004192:	681c      	ldr	r4, [r3, #0]
 8004194:	b124      	cbz	r4, 80041a0 <iprintf+0x14>
 8004196:	69a3      	ldr	r3, [r4, #24]
 8004198:	b913      	cbnz	r3, 80041a0 <iprintf+0x14>
 800419a:	4620      	mov	r0, r4
 800419c:	f000 fa36 	bl	800460c <__sinit>
 80041a0:	ab05      	add	r3, sp, #20
 80041a2:	9a04      	ldr	r2, [sp, #16]
 80041a4:	68a1      	ldr	r1, [r4, #8]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	4620      	mov	r0, r4
 80041aa:	f000 fbef 	bl	800498c <_vfiprintf_r>
 80041ae:	b002      	add	sp, #8
 80041b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b4:	b004      	add	sp, #16
 80041b6:	4770      	bx	lr
 80041b8:	2000000c 	.word	0x2000000c

080041bc <putchar>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <putchar+0x24>)
 80041c0:	681c      	ldr	r4, [r3, #0]
 80041c2:	4605      	mov	r5, r0
 80041c4:	b124      	cbz	r4, 80041d0 <putchar+0x14>
 80041c6:	69a3      	ldr	r3, [r4, #24]
 80041c8:	b913      	cbnz	r3, 80041d0 <putchar+0x14>
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fa1e 	bl	800460c <__sinit>
 80041d0:	68a2      	ldr	r2, [r4, #8]
 80041d2:	4629      	mov	r1, r5
 80041d4:	4620      	mov	r0, r4
 80041d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041da:	f000 be75 	b.w	8004ec8 <_putc_r>
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c

080041e4 <_puts_r>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	460e      	mov	r6, r1
 80041e8:	4605      	mov	r5, r0
 80041ea:	b118      	cbz	r0, 80041f4 <_puts_r+0x10>
 80041ec:	6983      	ldr	r3, [r0, #24]
 80041ee:	b90b      	cbnz	r3, 80041f4 <_puts_r+0x10>
 80041f0:	f000 fa0c 	bl	800460c <__sinit>
 80041f4:	69ab      	ldr	r3, [r5, #24]
 80041f6:	68ac      	ldr	r4, [r5, #8]
 80041f8:	b913      	cbnz	r3, 8004200 <_puts_r+0x1c>
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fa06 	bl	800460c <__sinit>
 8004200:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_puts_r+0xac>)
 8004202:	429c      	cmp	r4, r3
 8004204:	d117      	bne.n	8004236 <_puts_r+0x52>
 8004206:	686c      	ldr	r4, [r5, #4]
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	071b      	lsls	r3, r3, #28
 800420c:	d51d      	bpl.n	800424a <_puts_r+0x66>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	b1db      	cbz	r3, 800424a <_puts_r+0x66>
 8004212:	3e01      	subs	r6, #1
 8004214:	68a3      	ldr	r3, [r4, #8]
 8004216:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800421a:	3b01      	subs	r3, #1
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	b9e9      	cbnz	r1, 800425c <_puts_r+0x78>
 8004220:	2b00      	cmp	r3, #0
 8004222:	da2e      	bge.n	8004282 <_puts_r+0x9e>
 8004224:	4622      	mov	r2, r4
 8004226:	210a      	movs	r1, #10
 8004228:	4628      	mov	r0, r5
 800422a:	f000 f83f 	bl	80042ac <__swbuf_r>
 800422e:	3001      	adds	r0, #1
 8004230:	d011      	beq.n	8004256 <_puts_r+0x72>
 8004232:	200a      	movs	r0, #10
 8004234:	e011      	b.n	800425a <_puts_r+0x76>
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <_puts_r+0xb0>)
 8004238:	429c      	cmp	r4, r3
 800423a:	d101      	bne.n	8004240 <_puts_r+0x5c>
 800423c:	68ac      	ldr	r4, [r5, #8]
 800423e:	e7e3      	b.n	8004208 <_puts_r+0x24>
 8004240:	4b15      	ldr	r3, [pc, #84]	; (8004298 <_puts_r+0xb4>)
 8004242:	429c      	cmp	r4, r3
 8004244:	bf08      	it	eq
 8004246:	68ec      	ldreq	r4, [r5, #12]
 8004248:	e7de      	b.n	8004208 <_puts_r+0x24>
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 f87f 	bl	8004350 <__swsetup_r>
 8004252:	2800      	cmp	r0, #0
 8004254:	d0dd      	beq.n	8004212 <_puts_r+0x2e>
 8004256:	f04f 30ff 	mov.w	r0, #4294967295
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	2b00      	cmp	r3, #0
 800425e:	da04      	bge.n	800426a <_puts_r+0x86>
 8004260:	69a2      	ldr	r2, [r4, #24]
 8004262:	429a      	cmp	r2, r3
 8004264:	dc06      	bgt.n	8004274 <_puts_r+0x90>
 8004266:	290a      	cmp	r1, #10
 8004268:	d004      	beq.n	8004274 <_puts_r+0x90>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	6022      	str	r2, [r4, #0]
 8004270:	7019      	strb	r1, [r3, #0]
 8004272:	e7cf      	b.n	8004214 <_puts_r+0x30>
 8004274:	4622      	mov	r2, r4
 8004276:	4628      	mov	r0, r5
 8004278:	f000 f818 	bl	80042ac <__swbuf_r>
 800427c:	3001      	adds	r0, #1
 800427e:	d1c9      	bne.n	8004214 <_puts_r+0x30>
 8004280:	e7e9      	b.n	8004256 <_puts_r+0x72>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	200a      	movs	r0, #10
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	7018      	strb	r0, [r3, #0]
 800428c:	e7e5      	b.n	800425a <_puts_r+0x76>
 800428e:	bf00      	nop
 8004290:	08005300 	.word	0x08005300
 8004294:	08005320 	.word	0x08005320
 8004298:	080052e0 	.word	0x080052e0

0800429c <puts>:
 800429c:	4b02      	ldr	r3, [pc, #8]	; (80042a8 <puts+0xc>)
 800429e:	4601      	mov	r1, r0
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	f7ff bf9f 	b.w	80041e4 <_puts_r>
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c

080042ac <__swbuf_r>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	460e      	mov	r6, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	4605      	mov	r5, r0
 80042b4:	b118      	cbz	r0, 80042be <__swbuf_r+0x12>
 80042b6:	6983      	ldr	r3, [r0, #24]
 80042b8:	b90b      	cbnz	r3, 80042be <__swbuf_r+0x12>
 80042ba:	f000 f9a7 	bl	800460c <__sinit>
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <__swbuf_r+0x98>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d12a      	bne.n	800431a <__swbuf_r+0x6e>
 80042c4:	686c      	ldr	r4, [r5, #4]
 80042c6:	69a3      	ldr	r3, [r4, #24]
 80042c8:	60a3      	str	r3, [r4, #8]
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	071a      	lsls	r2, r3, #28
 80042ce:	d52e      	bpl.n	800432e <__swbuf_r+0x82>
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	b363      	cbz	r3, 800432e <__swbuf_r+0x82>
 80042d4:	6923      	ldr	r3, [r4, #16]
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1ac0      	subs	r0, r0, r3
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	b2f6      	uxtb	r6, r6
 80042de:	4283      	cmp	r3, r0
 80042e0:	4637      	mov	r7, r6
 80042e2:	dc04      	bgt.n	80042ee <__swbuf_r+0x42>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f926 	bl	8004538 <_fflush_r>
 80042ec:	bb28      	cbnz	r0, 800433a <__swbuf_r+0x8e>
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	60a3      	str	r3, [r4, #8]
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	6022      	str	r2, [r4, #0]
 80042fa:	701e      	strb	r6, [r3, #0]
 80042fc:	6963      	ldr	r3, [r4, #20]
 80042fe:	3001      	adds	r0, #1
 8004300:	4283      	cmp	r3, r0
 8004302:	d004      	beq.n	800430e <__swbuf_r+0x62>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	07db      	lsls	r3, r3, #31
 8004308:	d519      	bpl.n	800433e <__swbuf_r+0x92>
 800430a:	2e0a      	cmp	r6, #10
 800430c:	d117      	bne.n	800433e <__swbuf_r+0x92>
 800430e:	4621      	mov	r1, r4
 8004310:	4628      	mov	r0, r5
 8004312:	f000 f911 	bl	8004538 <_fflush_r>
 8004316:	b190      	cbz	r0, 800433e <__swbuf_r+0x92>
 8004318:	e00f      	b.n	800433a <__swbuf_r+0x8e>
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <__swbuf_r+0x9c>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d101      	bne.n	8004324 <__swbuf_r+0x78>
 8004320:	68ac      	ldr	r4, [r5, #8]
 8004322:	e7d0      	b.n	80042c6 <__swbuf_r+0x1a>
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <__swbuf_r+0xa0>)
 8004326:	429c      	cmp	r4, r3
 8004328:	bf08      	it	eq
 800432a:	68ec      	ldreq	r4, [r5, #12]
 800432c:	e7cb      	b.n	80042c6 <__swbuf_r+0x1a>
 800432e:	4621      	mov	r1, r4
 8004330:	4628      	mov	r0, r5
 8004332:	f000 f80d 	bl	8004350 <__swsetup_r>
 8004336:	2800      	cmp	r0, #0
 8004338:	d0cc      	beq.n	80042d4 <__swbuf_r+0x28>
 800433a:	f04f 37ff 	mov.w	r7, #4294967295
 800433e:	4638      	mov	r0, r7
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004342:	bf00      	nop
 8004344:	08005300 	.word	0x08005300
 8004348:	08005320 	.word	0x08005320
 800434c:	080052e0 	.word	0x080052e0

08004350 <__swsetup_r>:
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <__swsetup_r+0xcc>)
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	4606      	mov	r6, r0
 8004358:	460c      	mov	r4, r1
 800435a:	b125      	cbz	r5, 8004366 <__swsetup_r+0x16>
 800435c:	69ab      	ldr	r3, [r5, #24]
 800435e:	b913      	cbnz	r3, 8004366 <__swsetup_r+0x16>
 8004360:	4628      	mov	r0, r5
 8004362:	f000 f953 	bl	800460c <__sinit>
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <__swsetup_r+0xd0>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d10f      	bne.n	800438c <__swsetup_r+0x3c>
 800436c:	686c      	ldr	r4, [r5, #4]
 800436e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004372:	b29a      	uxth	r2, r3
 8004374:	0715      	lsls	r5, r2, #28
 8004376:	d42c      	bmi.n	80043d2 <__swsetup_r+0x82>
 8004378:	06d0      	lsls	r0, r2, #27
 800437a:	d411      	bmi.n	80043a0 <__swsetup_r+0x50>
 800437c:	2209      	movs	r2, #9
 800437e:	6032      	str	r2, [r6, #0]
 8004380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	f04f 30ff 	mov.w	r0, #4294967295
 800438a:	e03e      	b.n	800440a <__swsetup_r+0xba>
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <__swsetup_r+0xd4>)
 800438e:	429c      	cmp	r4, r3
 8004390:	d101      	bne.n	8004396 <__swsetup_r+0x46>
 8004392:	68ac      	ldr	r4, [r5, #8]
 8004394:	e7eb      	b.n	800436e <__swsetup_r+0x1e>
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <__swsetup_r+0xd8>)
 8004398:	429c      	cmp	r4, r3
 800439a:	bf08      	it	eq
 800439c:	68ec      	ldreq	r4, [r5, #12]
 800439e:	e7e6      	b.n	800436e <__swsetup_r+0x1e>
 80043a0:	0751      	lsls	r1, r2, #29
 80043a2:	d512      	bpl.n	80043ca <__swsetup_r+0x7a>
 80043a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043a6:	b141      	cbz	r1, 80043ba <__swsetup_r+0x6a>
 80043a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ac:	4299      	cmp	r1, r3
 80043ae:	d002      	beq.n	80043b6 <__swsetup_r+0x66>
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 fa19 	bl	80047e8 <_free_r>
 80043b6:	2300      	movs	r3, #0
 80043b8:	6363      	str	r3, [r4, #52]	; 0x34
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	2300      	movs	r3, #0
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	f043 0308 	orr.w	r3, r3, #8
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	b94b      	cbnz	r3, 80043ea <__swsetup_r+0x9a>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d003      	beq.n	80043ea <__swsetup_r+0x9a>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4630      	mov	r0, r6
 80043e6:	f000 f9bf 	bl	8004768 <__smakebuf_r>
 80043ea:	89a2      	ldrh	r2, [r4, #12]
 80043ec:	f012 0301 	ands.w	r3, r2, #1
 80043f0:	d00c      	beq.n	800440c <__swsetup_r+0xbc>
 80043f2:	2300      	movs	r3, #0
 80043f4:	60a3      	str	r3, [r4, #8]
 80043f6:	6963      	ldr	r3, [r4, #20]
 80043f8:	425b      	negs	r3, r3
 80043fa:	61a3      	str	r3, [r4, #24]
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	b953      	cbnz	r3, 8004416 <__swsetup_r+0xc6>
 8004400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004404:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004408:	d1ba      	bne.n	8004380 <__swsetup_r+0x30>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	0792      	lsls	r2, r2, #30
 800440e:	bf58      	it	pl
 8004410:	6963      	ldrpl	r3, [r4, #20]
 8004412:	60a3      	str	r3, [r4, #8]
 8004414:	e7f2      	b.n	80043fc <__swsetup_r+0xac>
 8004416:	2000      	movs	r0, #0
 8004418:	e7f7      	b.n	800440a <__swsetup_r+0xba>
 800441a:	bf00      	nop
 800441c:	2000000c 	.word	0x2000000c
 8004420:	08005300 	.word	0x08005300
 8004424:	08005320 	.word	0x08005320
 8004428:	080052e0 	.word	0x080052e0

0800442c <__sflush_r>:
 800442c:	898a      	ldrh	r2, [r1, #12]
 800442e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004432:	4605      	mov	r5, r0
 8004434:	0710      	lsls	r0, r2, #28
 8004436:	460c      	mov	r4, r1
 8004438:	d458      	bmi.n	80044ec <__sflush_r+0xc0>
 800443a:	684b      	ldr	r3, [r1, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	dc05      	bgt.n	800444c <__sflush_r+0x20>
 8004440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	dc02      	bgt.n	800444c <__sflush_r+0x20>
 8004446:	2000      	movs	r0, #0
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800444e:	2e00      	cmp	r6, #0
 8004450:	d0f9      	beq.n	8004446 <__sflush_r+0x1a>
 8004452:	2300      	movs	r3, #0
 8004454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004458:	682f      	ldr	r7, [r5, #0]
 800445a:	6a21      	ldr	r1, [r4, #32]
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	d032      	beq.n	80044c6 <__sflush_r+0x9a>
 8004460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	075a      	lsls	r2, r3, #29
 8004466:	d505      	bpl.n	8004474 <__sflush_r+0x48>
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	1ac0      	subs	r0, r0, r3
 800446c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800446e:	b10b      	cbz	r3, 8004474 <__sflush_r+0x48>
 8004470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004472:	1ac0      	subs	r0, r0, r3
 8004474:	2300      	movs	r3, #0
 8004476:	4602      	mov	r2, r0
 8004478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800447a:	6a21      	ldr	r1, [r4, #32]
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	d106      	bne.n	8004494 <__sflush_r+0x68>
 8004486:	6829      	ldr	r1, [r5, #0]
 8004488:	291d      	cmp	r1, #29
 800448a:	d848      	bhi.n	800451e <__sflush_r+0xf2>
 800448c:	4a29      	ldr	r2, [pc, #164]	; (8004534 <__sflush_r+0x108>)
 800448e:	40ca      	lsrs	r2, r1
 8004490:	07d6      	lsls	r6, r2, #31
 8004492:	d544      	bpl.n	800451e <__sflush_r+0xf2>
 8004494:	2200      	movs	r2, #0
 8004496:	6062      	str	r2, [r4, #4]
 8004498:	04d9      	lsls	r1, r3, #19
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	6022      	str	r2, [r4, #0]
 800449e:	d504      	bpl.n	80044aa <__sflush_r+0x7e>
 80044a0:	1c42      	adds	r2, r0, #1
 80044a2:	d101      	bne.n	80044a8 <__sflush_r+0x7c>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b903      	cbnz	r3, 80044aa <__sflush_r+0x7e>
 80044a8:	6560      	str	r0, [r4, #84]	; 0x54
 80044aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ac:	602f      	str	r7, [r5, #0]
 80044ae:	2900      	cmp	r1, #0
 80044b0:	d0c9      	beq.n	8004446 <__sflush_r+0x1a>
 80044b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044b6:	4299      	cmp	r1, r3
 80044b8:	d002      	beq.n	80044c0 <__sflush_r+0x94>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f994 	bl	80047e8 <_free_r>
 80044c0:	2000      	movs	r0, #0
 80044c2:	6360      	str	r0, [r4, #52]	; 0x34
 80044c4:	e7c0      	b.n	8004448 <__sflush_r+0x1c>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b0      	blx	r6
 80044cc:	1c41      	adds	r1, r0, #1
 80044ce:	d1c8      	bne.n	8004462 <__sflush_r+0x36>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0c5      	beq.n	8004462 <__sflush_r+0x36>
 80044d6:	2b1d      	cmp	r3, #29
 80044d8:	d001      	beq.n	80044de <__sflush_r+0xb2>
 80044da:	2b16      	cmp	r3, #22
 80044dc:	d101      	bne.n	80044e2 <__sflush_r+0xb6>
 80044de:	602f      	str	r7, [r5, #0]
 80044e0:	e7b1      	b.n	8004446 <__sflush_r+0x1a>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e8:	81a3      	strh	r3, [r4, #12]
 80044ea:	e7ad      	b.n	8004448 <__sflush_r+0x1c>
 80044ec:	690f      	ldr	r7, [r1, #16]
 80044ee:	2f00      	cmp	r7, #0
 80044f0:	d0a9      	beq.n	8004446 <__sflush_r+0x1a>
 80044f2:	0793      	lsls	r3, r2, #30
 80044f4:	680e      	ldr	r6, [r1, #0]
 80044f6:	bf08      	it	eq
 80044f8:	694b      	ldreq	r3, [r1, #20]
 80044fa:	600f      	str	r7, [r1, #0]
 80044fc:	bf18      	it	ne
 80044fe:	2300      	movne	r3, #0
 8004500:	eba6 0807 	sub.w	r8, r6, r7
 8004504:	608b      	str	r3, [r1, #8]
 8004506:	f1b8 0f00 	cmp.w	r8, #0
 800450a:	dd9c      	ble.n	8004446 <__sflush_r+0x1a>
 800450c:	4643      	mov	r3, r8
 800450e:	463a      	mov	r2, r7
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004514:	4628      	mov	r0, r5
 8004516:	47b0      	blx	r6
 8004518:	2800      	cmp	r0, #0
 800451a:	dc06      	bgt.n	800452a <__sflush_r+0xfe>
 800451c:	89a3      	ldrh	r3, [r4, #12]
 800451e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	e78e      	b.n	8004448 <__sflush_r+0x1c>
 800452a:	4407      	add	r7, r0
 800452c:	eba8 0800 	sub.w	r8, r8, r0
 8004530:	e7e9      	b.n	8004506 <__sflush_r+0xda>
 8004532:	bf00      	nop
 8004534:	20400001 	.word	0x20400001

08004538 <_fflush_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	690b      	ldr	r3, [r1, #16]
 800453c:	4605      	mov	r5, r0
 800453e:	460c      	mov	r4, r1
 8004540:	b1db      	cbz	r3, 800457a <_fflush_r+0x42>
 8004542:	b118      	cbz	r0, 800454c <_fflush_r+0x14>
 8004544:	6983      	ldr	r3, [r0, #24]
 8004546:	b90b      	cbnz	r3, 800454c <_fflush_r+0x14>
 8004548:	f000 f860 	bl	800460c <__sinit>
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <_fflush_r+0x48>)
 800454e:	429c      	cmp	r4, r3
 8004550:	d109      	bne.n	8004566 <_fflush_r+0x2e>
 8004552:	686c      	ldr	r4, [r5, #4]
 8004554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004558:	b17b      	cbz	r3, 800457a <_fflush_r+0x42>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004562:	f7ff bf63 	b.w	800442c <__sflush_r>
 8004566:	4b07      	ldr	r3, [pc, #28]	; (8004584 <_fflush_r+0x4c>)
 8004568:	429c      	cmp	r4, r3
 800456a:	d101      	bne.n	8004570 <_fflush_r+0x38>
 800456c:	68ac      	ldr	r4, [r5, #8]
 800456e:	e7f1      	b.n	8004554 <_fflush_r+0x1c>
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <_fflush_r+0x50>)
 8004572:	429c      	cmp	r4, r3
 8004574:	bf08      	it	eq
 8004576:	68ec      	ldreq	r4, [r5, #12]
 8004578:	e7ec      	b.n	8004554 <_fflush_r+0x1c>
 800457a:	2000      	movs	r0, #0
 800457c:	bd38      	pop	{r3, r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	08005300 	.word	0x08005300
 8004584:	08005320 	.word	0x08005320
 8004588:	080052e0 	.word	0x080052e0

0800458c <std>:
 800458c:	2300      	movs	r3, #0
 800458e:	b510      	push	{r4, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	e9c0 3300 	strd	r3, r3, [r0]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	; 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045a2:	6183      	str	r3, [r0, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	2208      	movs	r2, #8
 80045a8:	305c      	adds	r0, #92	; 0x5c
 80045aa:	f7ff fde7 	bl	800417c <memset>
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <std+0x38>)
 80045b0:	6263      	str	r3, [r4, #36]	; 0x24
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <std+0x3c>)
 80045b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <std+0x40>)
 80045b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <std+0x44>)
 80045bc:	6224      	str	r4, [r4, #32]
 80045be:	6323      	str	r3, [r4, #48]	; 0x30
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	bf00      	nop
 80045c4:	08004f55 	.word	0x08004f55
 80045c8:	08004f77 	.word	0x08004f77
 80045cc:	08004faf 	.word	0x08004faf
 80045d0:	08004fd3 	.word	0x08004fd3

080045d4 <_cleanup_r>:
 80045d4:	4901      	ldr	r1, [pc, #4]	; (80045dc <_cleanup_r+0x8>)
 80045d6:	f000 b885 	b.w	80046e4 <_fwalk_reent>
 80045da:	bf00      	nop
 80045dc:	08004539 	.word	0x08004539

080045e0 <__sfmoreglue>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	1e4a      	subs	r2, r1, #1
 80045e4:	2568      	movs	r5, #104	; 0x68
 80045e6:	4355      	muls	r5, r2
 80045e8:	460e      	mov	r6, r1
 80045ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045ee:	f000 f949 	bl	8004884 <_malloc_r>
 80045f2:	4604      	mov	r4, r0
 80045f4:	b140      	cbz	r0, 8004608 <__sfmoreglue+0x28>
 80045f6:	2100      	movs	r1, #0
 80045f8:	e9c0 1600 	strd	r1, r6, [r0]
 80045fc:	300c      	adds	r0, #12
 80045fe:	60a0      	str	r0, [r4, #8]
 8004600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004604:	f7ff fdba 	bl	800417c <memset>
 8004608:	4620      	mov	r0, r4
 800460a:	bd70      	pop	{r4, r5, r6, pc}

0800460c <__sinit>:
 800460c:	6983      	ldr	r3, [r0, #24]
 800460e:	b510      	push	{r4, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	bb33      	cbnz	r3, 8004662 <__sinit+0x56>
 8004614:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004618:	6503      	str	r3, [r0, #80]	; 0x50
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <__sinit+0x58>)
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <__sinit+0x5c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6282      	str	r2, [r0, #40]	; 0x28
 8004622:	4298      	cmp	r0, r3
 8004624:	bf04      	itt	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	6183      	streq	r3, [r0, #24]
 800462a:	f000 f81f 	bl	800466c <__sfp>
 800462e:	6060      	str	r0, [r4, #4]
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f81b 	bl	800466c <__sfp>
 8004636:	60a0      	str	r0, [r4, #8]
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f817 	bl	800466c <__sfp>
 800463e:	2200      	movs	r2, #0
 8004640:	60e0      	str	r0, [r4, #12]
 8004642:	2104      	movs	r1, #4
 8004644:	6860      	ldr	r0, [r4, #4]
 8004646:	f7ff ffa1 	bl	800458c <std>
 800464a:	2201      	movs	r2, #1
 800464c:	2109      	movs	r1, #9
 800464e:	68a0      	ldr	r0, [r4, #8]
 8004650:	f7ff ff9c 	bl	800458c <std>
 8004654:	2202      	movs	r2, #2
 8004656:	2112      	movs	r1, #18
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	f7ff ff97 	bl	800458c <std>
 800465e:	2301      	movs	r3, #1
 8004660:	61a3      	str	r3, [r4, #24]
 8004662:	bd10      	pop	{r4, pc}
 8004664:	080052dc 	.word	0x080052dc
 8004668:	080045d5 	.word	0x080045d5

0800466c <__sfp>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <__sfp+0x70>)
 8004670:	681e      	ldr	r6, [r3, #0]
 8004672:	69b3      	ldr	r3, [r6, #24]
 8004674:	4607      	mov	r7, r0
 8004676:	b913      	cbnz	r3, 800467e <__sfp+0x12>
 8004678:	4630      	mov	r0, r6
 800467a:	f7ff ffc7 	bl	800460c <__sinit>
 800467e:	3648      	adds	r6, #72	; 0x48
 8004680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004684:	3b01      	subs	r3, #1
 8004686:	d503      	bpl.n	8004690 <__sfp+0x24>
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	b133      	cbz	r3, 800469a <__sfp+0x2e>
 800468c:	6836      	ldr	r6, [r6, #0]
 800468e:	e7f7      	b.n	8004680 <__sfp+0x14>
 8004690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004694:	b16d      	cbz	r5, 80046b2 <__sfp+0x46>
 8004696:	3468      	adds	r4, #104	; 0x68
 8004698:	e7f4      	b.n	8004684 <__sfp+0x18>
 800469a:	2104      	movs	r1, #4
 800469c:	4638      	mov	r0, r7
 800469e:	f7ff ff9f 	bl	80045e0 <__sfmoreglue>
 80046a2:	6030      	str	r0, [r6, #0]
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d1f1      	bne.n	800468c <__sfp+0x20>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4604      	mov	r4, r0
 80046ae:	4620      	mov	r0, r4
 80046b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <__sfp+0x74>)
 80046b4:	6665      	str	r5, [r4, #100]	; 0x64
 80046b6:	e9c4 5500 	strd	r5, r5, [r4]
 80046ba:	60a5      	str	r5, [r4, #8]
 80046bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80046c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80046c4:	2208      	movs	r2, #8
 80046c6:	4629      	mov	r1, r5
 80046c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046cc:	f7ff fd56 	bl	800417c <memset>
 80046d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046d8:	e7e9      	b.n	80046ae <__sfp+0x42>
 80046da:	bf00      	nop
 80046dc:	080052dc 	.word	0x080052dc
 80046e0:	ffff0001 	.word	0xffff0001

080046e4 <_fwalk_reent>:
 80046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e8:	4680      	mov	r8, r0
 80046ea:	4689      	mov	r9, r1
 80046ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046f0:	2600      	movs	r6, #0
 80046f2:	b914      	cbnz	r4, 80046fa <_fwalk_reent+0x16>
 80046f4:	4630      	mov	r0, r6
 80046f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80046fe:	3f01      	subs	r7, #1
 8004700:	d501      	bpl.n	8004706 <_fwalk_reent+0x22>
 8004702:	6824      	ldr	r4, [r4, #0]
 8004704:	e7f5      	b.n	80046f2 <_fwalk_reent+0xe>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d907      	bls.n	800471c <_fwalk_reent+0x38>
 800470c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004710:	3301      	adds	r3, #1
 8004712:	d003      	beq.n	800471c <_fwalk_reent+0x38>
 8004714:	4629      	mov	r1, r5
 8004716:	4640      	mov	r0, r8
 8004718:	47c8      	blx	r9
 800471a:	4306      	orrs	r6, r0
 800471c:	3568      	adds	r5, #104	; 0x68
 800471e:	e7ee      	b.n	80046fe <_fwalk_reent+0x1a>

08004720 <__swhatbuf_r>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	460e      	mov	r6, r1
 8004724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004728:	2900      	cmp	r1, #0
 800472a:	b096      	sub	sp, #88	; 0x58
 800472c:	4614      	mov	r4, r2
 800472e:	461d      	mov	r5, r3
 8004730:	da07      	bge.n	8004742 <__swhatbuf_r+0x22>
 8004732:	2300      	movs	r3, #0
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	89b3      	ldrh	r3, [r6, #12]
 8004738:	061a      	lsls	r2, r3, #24
 800473a:	d410      	bmi.n	800475e <__swhatbuf_r+0x3e>
 800473c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004740:	e00e      	b.n	8004760 <__swhatbuf_r+0x40>
 8004742:	466a      	mov	r2, sp
 8004744:	f000 fc6c 	bl	8005020 <_fstat_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	dbf2      	blt.n	8004732 <__swhatbuf_r+0x12>
 800474c:	9a01      	ldr	r2, [sp, #4]
 800474e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004752:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004756:	425a      	negs	r2, r3
 8004758:	415a      	adcs	r2, r3
 800475a:	602a      	str	r2, [r5, #0]
 800475c:	e7ee      	b.n	800473c <__swhatbuf_r+0x1c>
 800475e:	2340      	movs	r3, #64	; 0x40
 8004760:	2000      	movs	r0, #0
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	b016      	add	sp, #88	; 0x58
 8004766:	bd70      	pop	{r4, r5, r6, pc}

08004768 <__smakebuf_r>:
 8004768:	898b      	ldrh	r3, [r1, #12]
 800476a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800476c:	079d      	lsls	r5, r3, #30
 800476e:	4606      	mov	r6, r0
 8004770:	460c      	mov	r4, r1
 8004772:	d507      	bpl.n	8004784 <__smakebuf_r+0x1c>
 8004774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2301      	movs	r3, #1
 800477e:	6163      	str	r3, [r4, #20]
 8004780:	b002      	add	sp, #8
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	ab01      	add	r3, sp, #4
 8004786:	466a      	mov	r2, sp
 8004788:	f7ff ffca 	bl	8004720 <__swhatbuf_r>
 800478c:	9900      	ldr	r1, [sp, #0]
 800478e:	4605      	mov	r5, r0
 8004790:	4630      	mov	r0, r6
 8004792:	f000 f877 	bl	8004884 <_malloc_r>
 8004796:	b948      	cbnz	r0, 80047ac <__smakebuf_r+0x44>
 8004798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479c:	059a      	lsls	r2, r3, #22
 800479e:	d4ef      	bmi.n	8004780 <__smakebuf_r+0x18>
 80047a0:	f023 0303 	bic.w	r3, r3, #3
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	e7e3      	b.n	8004774 <__smakebuf_r+0xc>
 80047ac:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <__smakebuf_r+0x7c>)
 80047ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	6020      	str	r0, [r4, #0]
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	9b00      	ldr	r3, [sp, #0]
 80047bc:	6163      	str	r3, [r4, #20]
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	6120      	str	r0, [r4, #16]
 80047c2:	b15b      	cbz	r3, 80047dc <__smakebuf_r+0x74>
 80047c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 fc3b 	bl	8005044 <_isatty_r>
 80047ce:	b128      	cbz	r0, 80047dc <__smakebuf_r+0x74>
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	431d      	orrs	r5, r3
 80047e0:	81a5      	strh	r5, [r4, #12]
 80047e2:	e7cd      	b.n	8004780 <__smakebuf_r+0x18>
 80047e4:	080045d5 	.word	0x080045d5

080047e8 <_free_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4605      	mov	r5, r0
 80047ec:	2900      	cmp	r1, #0
 80047ee:	d045      	beq.n	800487c <_free_r+0x94>
 80047f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f4:	1f0c      	subs	r4, r1, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfb8      	it	lt
 80047fa:	18e4      	addlt	r4, r4, r3
 80047fc:	f000 fc44 	bl	8005088 <__malloc_lock>
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <_free_r+0x98>)
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	4610      	mov	r0, r2
 8004806:	b933      	cbnz	r3, 8004816 <_free_r+0x2e>
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6014      	str	r4, [r2, #0]
 800480c:	4628      	mov	r0, r5
 800480e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004812:	f000 bc3a 	b.w	800508a <__malloc_unlock>
 8004816:	42a3      	cmp	r3, r4
 8004818:	d90c      	bls.n	8004834 <_free_r+0x4c>
 800481a:	6821      	ldr	r1, [r4, #0]
 800481c:	1862      	adds	r2, r4, r1
 800481e:	4293      	cmp	r3, r2
 8004820:	bf04      	itt	eq
 8004822:	681a      	ldreq	r2, [r3, #0]
 8004824:	685b      	ldreq	r3, [r3, #4]
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	bf04      	itt	eq
 800482a:	1852      	addeq	r2, r2, r1
 800482c:	6022      	streq	r2, [r4, #0]
 800482e:	6004      	str	r4, [r0, #0]
 8004830:	e7ec      	b.n	800480c <_free_r+0x24>
 8004832:	4613      	mov	r3, r2
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	b10a      	cbz	r2, 800483c <_free_r+0x54>
 8004838:	42a2      	cmp	r2, r4
 800483a:	d9fa      	bls.n	8004832 <_free_r+0x4a>
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	1858      	adds	r0, r3, r1
 8004840:	42a0      	cmp	r0, r4
 8004842:	d10b      	bne.n	800485c <_free_r+0x74>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	4401      	add	r1, r0
 8004848:	1858      	adds	r0, r3, r1
 800484a:	4282      	cmp	r2, r0
 800484c:	6019      	str	r1, [r3, #0]
 800484e:	d1dd      	bne.n	800480c <_free_r+0x24>
 8004850:	6810      	ldr	r0, [r2, #0]
 8004852:	6852      	ldr	r2, [r2, #4]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	4401      	add	r1, r0
 8004858:	6019      	str	r1, [r3, #0]
 800485a:	e7d7      	b.n	800480c <_free_r+0x24>
 800485c:	d902      	bls.n	8004864 <_free_r+0x7c>
 800485e:	230c      	movs	r3, #12
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	e7d3      	b.n	800480c <_free_r+0x24>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428a      	cmp	r2, r1
 800486a:	bf04      	itt	eq
 800486c:	6811      	ldreq	r1, [r2, #0]
 800486e:	6852      	ldreq	r2, [r2, #4]
 8004870:	6062      	str	r2, [r4, #4]
 8004872:	bf04      	itt	eq
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	605c      	str	r4, [r3, #4]
 800487a:	e7c7      	b.n	800480c <_free_r+0x24>
 800487c:	bd38      	pop	{r3, r4, r5, pc}
 800487e:	bf00      	nop
 8004880:	20000090 	.word	0x20000090

08004884 <_malloc_r>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	1ccd      	adds	r5, r1, #3
 8004888:	f025 0503 	bic.w	r5, r5, #3
 800488c:	3508      	adds	r5, #8
 800488e:	2d0c      	cmp	r5, #12
 8004890:	bf38      	it	cc
 8004892:	250c      	movcc	r5, #12
 8004894:	2d00      	cmp	r5, #0
 8004896:	4606      	mov	r6, r0
 8004898:	db01      	blt.n	800489e <_malloc_r+0x1a>
 800489a:	42a9      	cmp	r1, r5
 800489c:	d903      	bls.n	80048a6 <_malloc_r+0x22>
 800489e:	230c      	movs	r3, #12
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	2000      	movs	r0, #0
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
 80048a6:	f000 fbef 	bl	8005088 <__malloc_lock>
 80048aa:	4a21      	ldr	r2, [pc, #132]	; (8004930 <_malloc_r+0xac>)
 80048ac:	6814      	ldr	r4, [r2, #0]
 80048ae:	4621      	mov	r1, r4
 80048b0:	b991      	cbnz	r1, 80048d8 <_malloc_r+0x54>
 80048b2:	4c20      	ldr	r4, [pc, #128]	; (8004934 <_malloc_r+0xb0>)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	b91b      	cbnz	r3, 80048c0 <_malloc_r+0x3c>
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 fb3b 	bl	8004f34 <_sbrk_r>
 80048be:	6020      	str	r0, [r4, #0]
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 fb36 	bl	8004f34 <_sbrk_r>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d124      	bne.n	8004916 <_malloc_r+0x92>
 80048cc:	230c      	movs	r3, #12
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 fbda 	bl	800508a <__malloc_unlock>
 80048d6:	e7e4      	b.n	80048a2 <_malloc_r+0x1e>
 80048d8:	680b      	ldr	r3, [r1, #0]
 80048da:	1b5b      	subs	r3, r3, r5
 80048dc:	d418      	bmi.n	8004910 <_malloc_r+0x8c>
 80048de:	2b0b      	cmp	r3, #11
 80048e0:	d90f      	bls.n	8004902 <_malloc_r+0x7e>
 80048e2:	600b      	str	r3, [r1, #0]
 80048e4:	50cd      	str	r5, [r1, r3]
 80048e6:	18cc      	adds	r4, r1, r3
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 fbce 	bl	800508a <__malloc_unlock>
 80048ee:	f104 000b 	add.w	r0, r4, #11
 80048f2:	1d23      	adds	r3, r4, #4
 80048f4:	f020 0007 	bic.w	r0, r0, #7
 80048f8:	1ac3      	subs	r3, r0, r3
 80048fa:	d0d3      	beq.n	80048a4 <_malloc_r+0x20>
 80048fc:	425a      	negs	r2, r3
 80048fe:	50e2      	str	r2, [r4, r3]
 8004900:	e7d0      	b.n	80048a4 <_malloc_r+0x20>
 8004902:	428c      	cmp	r4, r1
 8004904:	684b      	ldr	r3, [r1, #4]
 8004906:	bf16      	itet	ne
 8004908:	6063      	strne	r3, [r4, #4]
 800490a:	6013      	streq	r3, [r2, #0]
 800490c:	460c      	movne	r4, r1
 800490e:	e7eb      	b.n	80048e8 <_malloc_r+0x64>
 8004910:	460c      	mov	r4, r1
 8004912:	6849      	ldr	r1, [r1, #4]
 8004914:	e7cc      	b.n	80048b0 <_malloc_r+0x2c>
 8004916:	1cc4      	adds	r4, r0, #3
 8004918:	f024 0403 	bic.w	r4, r4, #3
 800491c:	42a0      	cmp	r0, r4
 800491e:	d005      	beq.n	800492c <_malloc_r+0xa8>
 8004920:	1a21      	subs	r1, r4, r0
 8004922:	4630      	mov	r0, r6
 8004924:	f000 fb06 	bl	8004f34 <_sbrk_r>
 8004928:	3001      	adds	r0, #1
 800492a:	d0cf      	beq.n	80048cc <_malloc_r+0x48>
 800492c:	6025      	str	r5, [r4, #0]
 800492e:	e7db      	b.n	80048e8 <_malloc_r+0x64>
 8004930:	20000090 	.word	0x20000090
 8004934:	20000094 	.word	0x20000094

08004938 <__sfputc_r>:
 8004938:	6893      	ldr	r3, [r2, #8]
 800493a:	3b01      	subs	r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	b410      	push	{r4}
 8004940:	6093      	str	r3, [r2, #8]
 8004942:	da08      	bge.n	8004956 <__sfputc_r+0x1e>
 8004944:	6994      	ldr	r4, [r2, #24]
 8004946:	42a3      	cmp	r3, r4
 8004948:	db01      	blt.n	800494e <__sfputc_r+0x16>
 800494a:	290a      	cmp	r1, #10
 800494c:	d103      	bne.n	8004956 <__sfputc_r+0x1e>
 800494e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004952:	f7ff bcab 	b.w	80042ac <__swbuf_r>
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	1c58      	adds	r0, r3, #1
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	7019      	strb	r1, [r3, #0]
 800495e:	4608      	mov	r0, r1
 8004960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004964:	4770      	bx	lr

08004966 <__sfputs_r>:
 8004966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004968:	4606      	mov	r6, r0
 800496a:	460f      	mov	r7, r1
 800496c:	4614      	mov	r4, r2
 800496e:	18d5      	adds	r5, r2, r3
 8004970:	42ac      	cmp	r4, r5
 8004972:	d101      	bne.n	8004978 <__sfputs_r+0x12>
 8004974:	2000      	movs	r0, #0
 8004976:	e007      	b.n	8004988 <__sfputs_r+0x22>
 8004978:	463a      	mov	r2, r7
 800497a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff ffda 	bl	8004938 <__sfputc_r>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d1f3      	bne.n	8004970 <__sfputs_r+0xa>
 8004988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800498c <_vfiprintf_r>:
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	460c      	mov	r4, r1
 8004992:	b09d      	sub	sp, #116	; 0x74
 8004994:	4617      	mov	r7, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4606      	mov	r6, r0
 800499a:	b118      	cbz	r0, 80049a4 <_vfiprintf_r+0x18>
 800499c:	6983      	ldr	r3, [r0, #24]
 800499e:	b90b      	cbnz	r3, 80049a4 <_vfiprintf_r+0x18>
 80049a0:	f7ff fe34 	bl	800460c <__sinit>
 80049a4:	4b7c      	ldr	r3, [pc, #496]	; (8004b98 <_vfiprintf_r+0x20c>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d158      	bne.n	8004a5c <_vfiprintf_r+0xd0>
 80049aa:	6874      	ldr	r4, [r6, #4]
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	0718      	lsls	r0, r3, #28
 80049b0:	d55e      	bpl.n	8004a70 <_vfiprintf_r+0xe4>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d05b      	beq.n	8004a70 <_vfiprintf_r+0xe4>
 80049b8:	2300      	movs	r3, #0
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	2320      	movs	r3, #32
 80049be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049c2:	2330      	movs	r3, #48	; 0x30
 80049c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c8:	9503      	str	r5, [sp, #12]
 80049ca:	f04f 0b01 	mov.w	fp, #1
 80049ce:	46b8      	mov	r8, r7
 80049d0:	4645      	mov	r5, r8
 80049d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049d6:	b10b      	cbz	r3, 80049dc <_vfiprintf_r+0x50>
 80049d8:	2b25      	cmp	r3, #37	; 0x25
 80049da:	d154      	bne.n	8004a86 <_vfiprintf_r+0xfa>
 80049dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80049e0:	d00b      	beq.n	80049fa <_vfiprintf_r+0x6e>
 80049e2:	4653      	mov	r3, sl
 80049e4:	463a      	mov	r2, r7
 80049e6:	4621      	mov	r1, r4
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff ffbc 	bl	8004966 <__sfputs_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	f000 80c2 	beq.w	8004b78 <_vfiprintf_r+0x1ec>
 80049f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f6:	4453      	add	r3, sl
 80049f8:	9309      	str	r3, [sp, #36]	; 0x24
 80049fa:	f898 3000 	ldrb.w	r3, [r8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80ba 	beq.w	8004b78 <_vfiprintf_r+0x1ec>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0e:	9304      	str	r3, [sp, #16]
 8004a10:	9307      	str	r3, [sp, #28]
 8004a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a16:	931a      	str	r3, [sp, #104]	; 0x68
 8004a18:	46a8      	mov	r8, r5
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a20:	485e      	ldr	r0, [pc, #376]	; (8004b9c <_vfiprintf_r+0x210>)
 8004a22:	f7fb fbd5 	bl	80001d0 <memchr>
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	bb78      	cbnz	r0, 8004a8a <_vfiprintf_r+0xfe>
 8004a2a:	06d9      	lsls	r1, r3, #27
 8004a2c:	bf44      	itt	mi
 8004a2e:	2220      	movmi	r2, #32
 8004a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a34:	071a      	lsls	r2, r3, #28
 8004a36:	bf44      	itt	mi
 8004a38:	222b      	movmi	r2, #43	; 0x2b
 8004a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a3e:	782a      	ldrb	r2, [r5, #0]
 8004a40:	2a2a      	cmp	r2, #42	; 0x2a
 8004a42:	d02a      	beq.n	8004a9a <_vfiprintf_r+0x10e>
 8004a44:	9a07      	ldr	r2, [sp, #28]
 8004a46:	46a8      	mov	r8, r5
 8004a48:	2000      	movs	r0, #0
 8004a4a:	250a      	movs	r5, #10
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d969      	bls.n	8004b2c <_vfiprintf_r+0x1a0>
 8004a58:	b360      	cbz	r0, 8004ab4 <_vfiprintf_r+0x128>
 8004a5a:	e024      	b.n	8004aa6 <_vfiprintf_r+0x11a>
 8004a5c:	4b50      	ldr	r3, [pc, #320]	; (8004ba0 <_vfiprintf_r+0x214>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d101      	bne.n	8004a66 <_vfiprintf_r+0xda>
 8004a62:	68b4      	ldr	r4, [r6, #8]
 8004a64:	e7a2      	b.n	80049ac <_vfiprintf_r+0x20>
 8004a66:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <_vfiprintf_r+0x218>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	bf08      	it	eq
 8004a6c:	68f4      	ldreq	r4, [r6, #12]
 8004a6e:	e79d      	b.n	80049ac <_vfiprintf_r+0x20>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff fc6c 	bl	8004350 <__swsetup_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d09d      	beq.n	80049b8 <_vfiprintf_r+0x2c>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	b01d      	add	sp, #116	; 0x74
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	46a8      	mov	r8, r5
 8004a88:	e7a2      	b.n	80049d0 <_vfiprintf_r+0x44>
 8004a8a:	4a44      	ldr	r2, [pc, #272]	; (8004b9c <_vfiprintf_r+0x210>)
 8004a8c:	1a80      	subs	r0, r0, r2
 8004a8e:	fa0b f000 	lsl.w	r0, fp, r0
 8004a92:	4318      	orrs	r0, r3
 8004a94:	9004      	str	r0, [sp, #16]
 8004a96:	4645      	mov	r5, r8
 8004a98:	e7be      	b.n	8004a18 <_vfiprintf_r+0x8c>
 8004a9a:	9a03      	ldr	r2, [sp, #12]
 8004a9c:	1d11      	adds	r1, r2, #4
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	9103      	str	r1, [sp, #12]
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	db01      	blt.n	8004aaa <_vfiprintf_r+0x11e>
 8004aa6:	9207      	str	r2, [sp, #28]
 8004aa8:	e004      	b.n	8004ab4 <_vfiprintf_r+0x128>
 8004aaa:	4252      	negs	r2, r2
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	9207      	str	r2, [sp, #28]
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	f898 3000 	ldrb.w	r3, [r8]
 8004ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aba:	d10e      	bne.n	8004ada <_vfiprintf_r+0x14e>
 8004abc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac2:	d138      	bne.n	8004b36 <_vfiprintf_r+0x1aa>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9203      	str	r2, [sp, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bfb8      	it	lt
 8004ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ad4:	f108 0802 	add.w	r8, r8, #2
 8004ad8:	9305      	str	r3, [sp, #20]
 8004ada:	4d33      	ldr	r5, [pc, #204]	; (8004ba8 <_vfiprintf_r+0x21c>)
 8004adc:	f898 1000 	ldrb.w	r1, [r8]
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f7fb fb74 	bl	80001d0 <memchr>
 8004ae8:	b140      	cbz	r0, 8004afc <_vfiprintf_r+0x170>
 8004aea:	2340      	movs	r3, #64	; 0x40
 8004aec:	1b40      	subs	r0, r0, r5
 8004aee:	fa03 f000 	lsl.w	r0, r3, r0
 8004af2:	9b04      	ldr	r3, [sp, #16]
 8004af4:	4303      	orrs	r3, r0
 8004af6:	f108 0801 	add.w	r8, r8, #1
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	f898 1000 	ldrb.w	r1, [r8]
 8004b00:	482a      	ldr	r0, [pc, #168]	; (8004bac <_vfiprintf_r+0x220>)
 8004b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b06:	2206      	movs	r2, #6
 8004b08:	f108 0701 	add.w	r7, r8, #1
 8004b0c:	f7fb fb60 	bl	80001d0 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d037      	beq.n	8004b84 <_vfiprintf_r+0x1f8>
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <_vfiprintf_r+0x224>)
 8004b16:	bb1b      	cbnz	r3, 8004b60 <_vfiprintf_r+0x1d4>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	3308      	adds	r3, #8
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	444b      	add	r3, r9
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	e750      	b.n	80049ce <_vfiprintf_r+0x42>
 8004b2c:	fb05 3202 	mla	r2, r5, r2, r3
 8004b30:	2001      	movs	r0, #1
 8004b32:	4688      	mov	r8, r1
 8004b34:	e78a      	b.n	8004a4c <_vfiprintf_r+0xc0>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f108 0801 	add.w	r8, r8, #1
 8004b3c:	9305      	str	r3, [sp, #20]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	250a      	movs	r5, #10
 8004b42:	4640      	mov	r0, r8
 8004b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b48:	3a30      	subs	r2, #48	; 0x30
 8004b4a:	2a09      	cmp	r2, #9
 8004b4c:	d903      	bls.n	8004b56 <_vfiprintf_r+0x1ca>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c3      	beq.n	8004ada <_vfiprintf_r+0x14e>
 8004b52:	9105      	str	r1, [sp, #20]
 8004b54:	e7c1      	b.n	8004ada <_vfiprintf_r+0x14e>
 8004b56:	fb05 2101 	mla	r1, r5, r1, r2
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	e7f0      	b.n	8004b42 <_vfiprintf_r+0x1b6>
 8004b60:	ab03      	add	r3, sp, #12
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4622      	mov	r2, r4
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <_vfiprintf_r+0x228>)
 8004b68:	a904      	add	r1, sp, #16
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f3af 8000 	nop.w
 8004b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b74:	4681      	mov	r9, r0
 8004b76:	d1d5      	bne.n	8004b24 <_vfiprintf_r+0x198>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	065b      	lsls	r3, r3, #25
 8004b7c:	f53f af7e 	bmi.w	8004a7c <_vfiprintf_r+0xf0>
 8004b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b82:	e77d      	b.n	8004a80 <_vfiprintf_r+0xf4>
 8004b84:	ab03      	add	r3, sp, #12
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <_vfiprintf_r+0x228>)
 8004b8c:	a904      	add	r1, sp, #16
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f000 f888 	bl	8004ca4 <_printf_i>
 8004b94:	e7ec      	b.n	8004b70 <_vfiprintf_r+0x1e4>
 8004b96:	bf00      	nop
 8004b98:	08005300 	.word	0x08005300
 8004b9c:	08005340 	.word	0x08005340
 8004ba0:	08005320 	.word	0x08005320
 8004ba4:	080052e0 	.word	0x080052e0
 8004ba8:	08005346 	.word	0x08005346
 8004bac:	0800534a 	.word	0x0800534a
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	08004967 	.word	0x08004967

08004bb8 <_printf_common>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	4691      	mov	r9, r2
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	688a      	ldr	r2, [r1, #8]
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bfb8      	it	lt
 8004bcc:	4613      	movlt	r3, r2
 8004bce:	f8c9 3000 	str.w	r3, [r9]
 8004bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	b112      	cbz	r2, 8004be2 <_printf_common+0x2a>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f8c9 3000 	str.w	r3, [r9]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bec:	3302      	addmi	r3, #2
 8004bee:	f8c9 3000 	strmi.w	r3, [r9]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	f015 0506 	ands.w	r5, r5, #6
 8004bf8:	d107      	bne.n	8004c0a <_printf_common+0x52>
 8004bfa:	f104 0a19 	add.w	sl, r4, #25
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	f8d9 2000 	ldr.w	r2, [r9]
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	42ab      	cmp	r3, r5
 8004c08:	dc28      	bgt.n	8004c5c <_printf_common+0xa4>
 8004c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	3300      	adds	r3, #0
 8004c12:	bf18      	it	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	0692      	lsls	r2, r2, #26
 8004c18:	d42d      	bmi.n	8004c76 <_printf_common+0xbe>
 8004c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4630      	mov	r0, r6
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d020      	beq.n	8004c6a <_printf_common+0xb2>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	68e5      	ldr	r5, [r4, #12]
 8004c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c30:	f003 0306 	and.w	r3, r3, #6
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	bf08      	it	eq
 8004c38:	1aad      	subeq	r5, r5, r2
 8004c3a:	68a3      	ldr	r3, [r4, #8]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	bf0c      	ite	eq
 8004c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c44:	2500      	movne	r5, #0
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bfc4      	itt	gt
 8004c4a:	1a9b      	subgt	r3, r3, r2
 8004c4c:	18ed      	addgt	r5, r5, r3
 8004c4e:	f04f 0900 	mov.w	r9, #0
 8004c52:	341a      	adds	r4, #26
 8004c54:	454d      	cmp	r5, r9
 8004c56:	d11a      	bne.n	8004c8e <_printf_common+0xd6>
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e008      	b.n	8004c6e <_printf_common+0xb6>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4652      	mov	r2, sl
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d103      	bne.n	8004c72 <_printf_common+0xba>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	3501      	adds	r5, #1
 8004c74:	e7c3      	b.n	8004bfe <_printf_common+0x46>
 8004c76:	18e1      	adds	r1, r4, r3
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	2030      	movs	r0, #48	; 0x30
 8004c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c80:	4422      	add	r2, r4
 8004c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	e7c5      	b.n	8004c1a <_printf_common+0x62>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4622      	mov	r2, r4
 8004c92:	4639      	mov	r1, r7
 8004c94:	4630      	mov	r0, r6
 8004c96:	47c0      	blx	r8
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d0e6      	beq.n	8004c6a <_printf_common+0xb2>
 8004c9c:	f109 0901 	add.w	r9, r9, #1
 8004ca0:	e7d8      	b.n	8004c54 <_printf_common+0x9c>
	...

08004ca4 <_printf_i>:
 8004ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cac:	460c      	mov	r4, r1
 8004cae:	7e09      	ldrb	r1, [r1, #24]
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	296e      	cmp	r1, #110	; 0x6e
 8004cb4:	4617      	mov	r7, r2
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	4698      	mov	r8, r3
 8004cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cbc:	f000 80b3 	beq.w	8004e26 <_printf_i+0x182>
 8004cc0:	d822      	bhi.n	8004d08 <_printf_i+0x64>
 8004cc2:	2963      	cmp	r1, #99	; 0x63
 8004cc4:	d036      	beq.n	8004d34 <_printf_i+0x90>
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x3a>
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	f000 80b9 	beq.w	8004e40 <_printf_i+0x19c>
 8004cce:	2958      	cmp	r1, #88	; 0x58
 8004cd0:	f000 8083 	beq.w	8004dda <_printf_i+0x136>
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cdc:	e032      	b.n	8004d44 <_printf_i+0xa0>
 8004cde:	2964      	cmp	r1, #100	; 0x64
 8004ce0:	d001      	beq.n	8004ce6 <_printf_i+0x42>
 8004ce2:	2969      	cmp	r1, #105	; 0x69
 8004ce4:	d1f6      	bne.n	8004cd4 <_printf_i+0x30>
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	0605      	lsls	r5, r0, #24
 8004cec:	f103 0104 	add.w	r1, r3, #4
 8004cf0:	d52a      	bpl.n	8004d48 <_printf_i+0xa4>
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da03      	bge.n	8004d02 <_printf_i+0x5e>
 8004cfa:	222d      	movs	r2, #45	; 0x2d
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d02:	486f      	ldr	r0, [pc, #444]	; (8004ec0 <_printf_i+0x21c>)
 8004d04:	220a      	movs	r2, #10
 8004d06:	e039      	b.n	8004d7c <_printf_i+0xd8>
 8004d08:	2973      	cmp	r1, #115	; 0x73
 8004d0a:	f000 809d 	beq.w	8004e48 <_printf_i+0x1a4>
 8004d0e:	d808      	bhi.n	8004d22 <_printf_i+0x7e>
 8004d10:	296f      	cmp	r1, #111	; 0x6f
 8004d12:	d020      	beq.n	8004d56 <_printf_i+0xb2>
 8004d14:	2970      	cmp	r1, #112	; 0x70
 8004d16:	d1dd      	bne.n	8004cd4 <_printf_i+0x30>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f043 0320 	orr.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e003      	b.n	8004d2a <_printf_i+0x86>
 8004d22:	2975      	cmp	r1, #117	; 0x75
 8004d24:	d017      	beq.n	8004d56 <_printf_i+0xb2>
 8004d26:	2978      	cmp	r1, #120	; 0x78
 8004d28:	d1d4      	bne.n	8004cd4 <_printf_i+0x30>
 8004d2a:	2378      	movs	r3, #120	; 0x78
 8004d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d30:	4864      	ldr	r0, [pc, #400]	; (8004ec4 <_printf_i+0x220>)
 8004d32:	e055      	b.n	8004de0 <_printf_i+0x13c>
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	1d19      	adds	r1, r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6011      	str	r1, [r2, #0]
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d44:	2301      	movs	r3, #1
 8004d46:	e08c      	b.n	8004e62 <_printf_i+0x1be>
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d50:	bf18      	it	ne
 8004d52:	b21b      	sxthne	r3, r3
 8004d54:	e7cf      	b.n	8004cf6 <_printf_i+0x52>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6010      	str	r0, [r2, #0]
 8004d5e:	0628      	lsls	r0, r5, #24
 8004d60:	d501      	bpl.n	8004d66 <_printf_i+0xc2>
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e002      	b.n	8004d6c <_printf_i+0xc8>
 8004d66:	0668      	lsls	r0, r5, #25
 8004d68:	d5fb      	bpl.n	8004d62 <_printf_i+0xbe>
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	4854      	ldr	r0, [pc, #336]	; (8004ec0 <_printf_i+0x21c>)
 8004d6e:	296f      	cmp	r1, #111	; 0x6f
 8004d70:	bf14      	ite	ne
 8004d72:	220a      	movne	r2, #10
 8004d74:	2208      	moveq	r2, #8
 8004d76:	2100      	movs	r1, #0
 8004d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d7c:	6865      	ldr	r5, [r4, #4]
 8004d7e:	60a5      	str	r5, [r4, #8]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	f2c0 8095 	blt.w	8004eb0 <_printf_i+0x20c>
 8004d86:	6821      	ldr	r1, [r4, #0]
 8004d88:	f021 0104 	bic.w	r1, r1, #4
 8004d8c:	6021      	str	r1, [r4, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <_printf_i+0x16a>
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	f040 808e 	bne.w	8004eb4 <_printf_i+0x210>
 8004d98:	4665      	mov	r5, ip
 8004d9a:	2a08      	cmp	r2, #8
 8004d9c:	d10b      	bne.n	8004db6 <_printf_i+0x112>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	07db      	lsls	r3, r3, #31
 8004da2:	d508      	bpl.n	8004db6 <_printf_i+0x112>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	6862      	ldr	r2, [r4, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bfde      	ittt	le
 8004dac:	2330      	movle	r3, #48	; 0x30
 8004dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004db6:	ebac 0305 	sub.w	r3, ip, r5
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	f8cd 8000 	str.w	r8, [sp]
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	aa03      	add	r2, sp, #12
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7ff fef6 	bl	8004bb8 <_printf_common>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d14d      	bne.n	8004e6c <_printf_i+0x1c8>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	b005      	add	sp, #20
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dda:	4839      	ldr	r0, [pc, #228]	; (8004ec0 <_printf_i+0x21c>)
 8004ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	1d1d      	adds	r5, r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6015      	str	r5, [r2, #0]
 8004dea:	060a      	lsls	r2, r1, #24
 8004dec:	d50b      	bpl.n	8004e06 <_printf_i+0x162>
 8004dee:	07ca      	lsls	r2, r1, #31
 8004df0:	bf44      	itt	mi
 8004df2:	f041 0120 	orrmi.w	r1, r1, #32
 8004df6:	6021      	strmi	r1, [r4, #0]
 8004df8:	b91b      	cbnz	r3, 8004e02 <_printf_i+0x15e>
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	f022 0220 	bic.w	r2, r2, #32
 8004e00:	6022      	str	r2, [r4, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	e7b7      	b.n	8004d76 <_printf_i+0xd2>
 8004e06:	064d      	lsls	r5, r1, #25
 8004e08:	bf48      	it	mi
 8004e0a:	b29b      	uxthmi	r3, r3
 8004e0c:	e7ef      	b.n	8004dee <_printf_i+0x14a>
 8004e0e:	4665      	mov	r5, ip
 8004e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e14:	fb02 3311 	mls	r3, r2, r1, r3
 8004e18:	5cc3      	ldrb	r3, [r0, r3]
 8004e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e1e:	460b      	mov	r3, r1
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d1f5      	bne.n	8004e10 <_printf_i+0x16c>
 8004e24:	e7b9      	b.n	8004d9a <_printf_i+0xf6>
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	6961      	ldr	r1, [r4, #20]
 8004e2c:	1d18      	adds	r0, r3, #4
 8004e2e:	6010      	str	r0, [r2, #0]
 8004e30:	0628      	lsls	r0, r5, #24
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	d501      	bpl.n	8004e3a <_printf_i+0x196>
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <_printf_i+0x19c>
 8004e3a:	066a      	lsls	r2, r5, #25
 8004e3c:	d5fb      	bpl.n	8004e36 <_printf_i+0x192>
 8004e3e:	8019      	strh	r1, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	4665      	mov	r5, ip
 8004e46:	e7b9      	b.n	8004dbc <_printf_i+0x118>
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	1d19      	adds	r1, r3, #4
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	681d      	ldr	r5, [r3, #0]
 8004e50:	6862      	ldr	r2, [r4, #4]
 8004e52:	2100      	movs	r1, #0
 8004e54:	4628      	mov	r0, r5
 8004e56:	f7fb f9bb 	bl	80001d0 <memchr>
 8004e5a:	b108      	cbz	r0, 8004e60 <_printf_i+0x1bc>
 8004e5c:	1b40      	subs	r0, r0, r5
 8004e5e:	6060      	str	r0, [r4, #4]
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6a:	e7a7      	b.n	8004dbc <_printf_i+0x118>
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4639      	mov	r1, r7
 8004e72:	4630      	mov	r0, r6
 8004e74:	47c0      	blx	r8
 8004e76:	3001      	adds	r0, #1
 8004e78:	d0aa      	beq.n	8004dd0 <_printf_i+0x12c>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	079b      	lsls	r3, r3, #30
 8004e7e:	d413      	bmi.n	8004ea8 <_printf_i+0x204>
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	4298      	cmp	r0, r3
 8004e86:	bfb8      	it	lt
 8004e88:	4618      	movlt	r0, r3
 8004e8a:	e7a3      	b.n	8004dd4 <_printf_i+0x130>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	464a      	mov	r2, r9
 8004e90:	4639      	mov	r1, r7
 8004e92:	4630      	mov	r0, r6
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d09a      	beq.n	8004dd0 <_printf_i+0x12c>
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	68e3      	ldr	r3, [r4, #12]
 8004e9e:	9a03      	ldr	r2, [sp, #12]
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	dcf2      	bgt.n	8004e8c <_printf_i+0x1e8>
 8004ea6:	e7eb      	b.n	8004e80 <_printf_i+0x1dc>
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	f104 0919 	add.w	r9, r4, #25
 8004eae:	e7f5      	b.n	8004e9c <_printf_i+0x1f8>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ac      	bne.n	8004e0e <_printf_i+0x16a>
 8004eb4:	7803      	ldrb	r3, [r0, #0]
 8004eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ebe:	e76c      	b.n	8004d9a <_printf_i+0xf6>
 8004ec0:	08005351 	.word	0x08005351
 8004ec4:	08005362 	.word	0x08005362

08004ec8 <_putc_r>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	460d      	mov	r5, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	4606      	mov	r6, r0
 8004ed0:	b118      	cbz	r0, 8004eda <_putc_r+0x12>
 8004ed2:	6983      	ldr	r3, [r0, #24]
 8004ed4:	b90b      	cbnz	r3, 8004eda <_putc_r+0x12>
 8004ed6:	f7ff fb99 	bl	800460c <__sinit>
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <_putc_r+0x60>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	d112      	bne.n	8004f06 <_putc_r+0x3e>
 8004ee0:	6874      	ldr	r4, [r6, #4]
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	da16      	bge.n	8004f1a <_putc_r+0x52>
 8004eec:	69a2      	ldr	r2, [r4, #24]
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	db02      	blt.n	8004ef8 <_putc_r+0x30>
 8004ef2:	b2eb      	uxtb	r3, r5
 8004ef4:	2b0a      	cmp	r3, #10
 8004ef6:	d110      	bne.n	8004f1a <_putc_r+0x52>
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	4630      	mov	r0, r6
 8004efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f02:	f7ff b9d3 	b.w	80042ac <__swbuf_r>
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <_putc_r+0x64>)
 8004f08:	429c      	cmp	r4, r3
 8004f0a:	d101      	bne.n	8004f10 <_putc_r+0x48>
 8004f0c:	68b4      	ldr	r4, [r6, #8]
 8004f0e:	e7e8      	b.n	8004ee2 <_putc_r+0x1a>
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <_putc_r+0x68>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	bf08      	it	eq
 8004f16:	68f4      	ldreq	r4, [r6, #12]
 8004f18:	e7e3      	b.n	8004ee2 <_putc_r+0x1a>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	701d      	strb	r5, [r3, #0]
 8004f22:	b2e8      	uxtb	r0, r5
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	bf00      	nop
 8004f28:	08005300 	.word	0x08005300
 8004f2c:	08005320 	.word	0x08005320
 8004f30:	080052e0 	.word	0x080052e0

08004f34 <_sbrk_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4c06      	ldr	r4, [pc, #24]	; (8004f50 <_sbrk_r+0x1c>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	f7fc fdd4 	bl	8001aec <_sbrk>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_sbrk_r+0x1a>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_sbrk_r+0x1a>
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	2000011c 	.word	0x2000011c

08004f54 <__sread>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	460c      	mov	r4, r1
 8004f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5c:	f000 f896 	bl	800508c <_read_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	bfab      	itete	ge
 8004f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f66:	89a3      	ldrhlt	r3, [r4, #12]
 8004f68:	181b      	addge	r3, r3, r0
 8004f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f6e:	bfac      	ite	ge
 8004f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f72:	81a3      	strhlt	r3, [r4, #12]
 8004f74:	bd10      	pop	{r4, pc}

08004f76 <__swrite>:
 8004f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	461f      	mov	r7, r3
 8004f7c:	898b      	ldrh	r3, [r1, #12]
 8004f7e:	05db      	lsls	r3, r3, #23
 8004f80:	4605      	mov	r5, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	4616      	mov	r6, r2
 8004f86:	d505      	bpl.n	8004f94 <__swrite+0x1e>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f90:	f000 f868 	bl	8005064 <_lseek_r>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	f000 b817 	b.w	8004fdc <_write_r>

08004fae <__sseek>:
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb6:	f000 f855 	bl	8005064 <_lseek_r>
 8004fba:	1c43      	adds	r3, r0, #1
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	bf15      	itete	ne
 8004fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fca:	81a3      	strheq	r3, [r4, #12]
 8004fcc:	bf18      	it	ne
 8004fce:	81a3      	strhne	r3, [r4, #12]
 8004fd0:	bd10      	pop	{r4, pc}

08004fd2 <__sclose>:
 8004fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd6:	f000 b813 	b.w	8005000 <_close_r>
	...

08004fdc <_write_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4c07      	ldr	r4, [pc, #28]	; (8004ffc <_write_r+0x20>)
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6022      	str	r2, [r4, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fc fd28 	bl	8001a40 <_write>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_write_r+0x1e>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_write_r+0x1e>
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	2000011c 	.word	0x2000011c

08005000 <_close_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4c06      	ldr	r4, [pc, #24]	; (800501c <_close_r+0x1c>)
 8005004:	2300      	movs	r3, #0
 8005006:	4605      	mov	r5, r0
 8005008:	4608      	mov	r0, r1
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	f7fc fd3a 	bl	8001a84 <_close>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_close_r+0x1a>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	b103      	cbz	r3, 800501a <_close_r+0x1a>
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	2000011c 	.word	0x2000011c

08005020 <_fstat_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4c07      	ldr	r4, [pc, #28]	; (8005040 <_fstat_r+0x20>)
 8005024:	2300      	movs	r3, #0
 8005026:	4605      	mov	r5, r0
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	f7fc fd35 	bl	8001a9c <_fstat>
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	d102      	bne.n	800503c <_fstat_r+0x1c>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	b103      	cbz	r3, 800503c <_fstat_r+0x1c>
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	bd38      	pop	{r3, r4, r5, pc}
 800503e:	bf00      	nop
 8005040:	2000011c 	.word	0x2000011c

08005044 <_isatty_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c06      	ldr	r4, [pc, #24]	; (8005060 <_isatty_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4605      	mov	r5, r0
 800504c:	4608      	mov	r0, r1
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f7fc fd34 	bl	8001abc <_isatty>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_isatty_r+0x1a>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	b103      	cbz	r3, 800505e <_isatty_r+0x1a>
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	2000011c 	.word	0x2000011c

08005064 <_lseek_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4c07      	ldr	r4, [pc, #28]	; (8005084 <_lseek_r+0x20>)
 8005068:	4605      	mov	r5, r0
 800506a:	4608      	mov	r0, r1
 800506c:	4611      	mov	r1, r2
 800506e:	2200      	movs	r2, #0
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fc fd2d 	bl	8001ad2 <_lseek>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_lseek_r+0x1e>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	b103      	cbz	r3, 8005082 <_lseek_r+0x1e>
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	2000011c 	.word	0x2000011c

08005088 <__malloc_lock>:
 8005088:	4770      	bx	lr

0800508a <__malloc_unlock>:
 800508a:	4770      	bx	lr

0800508c <_read_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4c07      	ldr	r4, [pc, #28]	; (80050ac <_read_r+0x20>)
 8005090:	4605      	mov	r5, r0
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	2200      	movs	r2, #0
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fc fcb2 	bl	8001a04 <_read>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_read_r+0x1e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_read_r+0x1e>
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	2000011c 	.word	0x2000011c

080050b0 <_init>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr

080050bc <_fini>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr
